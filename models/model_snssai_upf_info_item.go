// Copyright 2019 Communication Service/Software Laboratory, National Chiao Tung University (free5gc.org)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * NRF NFManagement Service
 *
 * NRF NFManagement Service
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

type SnssaiUpfInfoItem struct {
	SNssai               *Snssai                `json:"sNssai" yaml:"sNssai" bson:"sNssai" mapstructure:"SNssai"`
	DnnUpfInfoList       []DnnUpfInfoItem       `json:"dnnUpfInfoList" yaml:"dnnUpfInfoList" bson:"dnnUpfInfoList" mapstructure:"DnnUpfInfoList"`
	RedundantTransport   *bool                  `json:"redundantTransport,omitempty"`
	InterfaceUpfInfoList []InterfaceUpfInfoItem `json:"interfaceUpfInfoList,omitempty"`
	DnnUpfInfoListId     *int32                 `json:"dnnUpfInfoListId,omitempty"`
}

type _SnssaiUpfInfoItem SnssaiUpfInfoItem

// NewSnssaiUpfInfoItem instantiates a new SnssaiUpfInfoItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnssaiUpfInfoItem(sNssai Snssai) *SnssaiUpfInfoItem {
	this := SnssaiUpfInfoItem{}
	return &this
}

// NewSnssaiUpfInfoItemWithDefaults instantiates a new SnssaiUpfInfoItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnssaiUpfInfoItemWithDefaults() *SnssaiUpfInfoItem {
	this := SnssaiUpfInfoItem{}
	var redundantTransport bool = false
	this.RedundantTransport = &redundantTransport
	return &this
}

// GetSNssai returns the SNssai field value
func (o *SnssaiUpfInfoItem) GetSNssai() *Snssai {
	if o == nil {
		var ret Snssai
		return &ret
	}

	return o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value
// and a boolean to check if the value has been set.
func (o *SnssaiUpfInfoItem) GetSNssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.SNssai, true
}

// SetSNssai sets field value
func (o *SnssaiUpfInfoItem) SetSNssai(v Snssai) {
	o.SNssai = &v
}

// GetDnnUpfInfoList returns the DnnUpfInfoList field value if set, zero value otherwise.
func (o *SnssaiUpfInfoItem) GetDnnUpfInfoList() []DnnUpfInfoItem {
	if o == nil || IsNil(o.DnnUpfInfoList) {
		var ret []DnnUpfInfoItem
		return ret
	}
	return o.DnnUpfInfoList
}

// GetDnnUpfInfoListOk returns a tuple with the DnnUpfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnssaiUpfInfoItem) GetDnnUpfInfoListOk() ([]DnnUpfInfoItem, bool) {
	if o == nil || IsNil(o.DnnUpfInfoList) {
		return nil, false
	}
	return o.DnnUpfInfoList, true
}

// HasDnnUpfInfoList returns a boolean if a field has been set.
func (o *SnssaiUpfInfoItem) HasDnnUpfInfoList() bool {
	if o != nil && !IsNil(o.DnnUpfInfoList) {
		return true
	}

	return false
}

// SetDnnUpfInfoList gets a reference to the given []DnnUpfInfoItem and assigns it to the DnnUpfInfoList field.
func (o *SnssaiUpfInfoItem) SetDnnUpfInfoList(v []DnnUpfInfoItem) {
	o.DnnUpfInfoList = v
}

// GetRedundantTransport returns the RedundantTransport field value if set, zero value otherwise.
func (o *SnssaiUpfInfoItem) GetRedundantTransport() bool {
	if o == nil || IsNil(o.RedundantTransport) {
		var ret bool
		return ret
	}
	return *o.RedundantTransport
}

// GetRedundantTransportOk returns a tuple with the RedundantTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnssaiUpfInfoItem) GetRedundantTransportOk() (*bool, bool) {
	if o == nil || IsNil(o.RedundantTransport) {
		return nil, false
	}
	return o.RedundantTransport, true
}

// HasRedundantTransport returns a boolean if a field has been set.
func (o *SnssaiUpfInfoItem) HasRedundantTransport() bool {
	if o != nil && !IsNil(o.RedundantTransport) {
		return true
	}

	return false
}

// SetRedundantTransport gets a reference to the given bool and assigns it to the RedundantTransport field.
func (o *SnssaiUpfInfoItem) SetRedundantTransport(v bool) {
	o.RedundantTransport = &v
}

// GetInterfaceUpfInfoList returns the InterfaceUpfInfoList field value if set, zero value otherwise.
func (o *SnssaiUpfInfoItem) GetInterfaceUpfInfoList() []InterfaceUpfInfoItem {
	if o == nil || IsNil(o.InterfaceUpfInfoList) {
		var ret []InterfaceUpfInfoItem
		return ret
	}
	return o.InterfaceUpfInfoList
}

// GetInterfaceUpfInfoListOk returns a tuple with the InterfaceUpfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnssaiUpfInfoItem) GetInterfaceUpfInfoListOk() ([]InterfaceUpfInfoItem, bool) {
	if o == nil || IsNil(o.InterfaceUpfInfoList) {
		return nil, false
	}
	return o.InterfaceUpfInfoList, true
}

// HasInterfaceUpfInfoList returns a boolean if a field has been set.
func (o *SnssaiUpfInfoItem) HasInterfaceUpfInfoList() bool {
	if o != nil && !IsNil(o.InterfaceUpfInfoList) {
		return true
	}

	return false
}

// SetInterfaceUpfInfoList gets a reference to the given []InterfaceUpfInfoItem and assigns it to the InterfaceUpfInfoList field.
func (o *SnssaiUpfInfoItem) SetInterfaceUpfInfoList(v []InterfaceUpfInfoItem) {
	o.InterfaceUpfInfoList = v
}

// GetDnnUpfInfoListId returns the DnnUpfInfoListId field value if set, zero value otherwise.
func (o *SnssaiUpfInfoItem) GetDnnUpfInfoListId() int32 {
	if o == nil || IsNil(o.DnnUpfInfoListId) {
		var ret int32
		return ret
	}
	return *o.DnnUpfInfoListId
}

// GetDnnUpfInfoListIdOk returns a tuple with the DnnUpfInfoListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnssaiUpfInfoItem) GetDnnUpfInfoListIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnnUpfInfoListId) {
		return nil, false
	}
	return o.DnnUpfInfoListId, true
}

// HasDnnUpfInfoListId returns a boolean if a field has been set.
func (o *SnssaiUpfInfoItem) HasDnnUpfInfoListId() bool {
	if o != nil && !IsNil(o.DnnUpfInfoListId) {
		return true
	}

	return false
}

// SetDnnUpfInfoListId gets a reference to the given int32 and assigns it to the DnnUpfInfoListId field.
func (o *SnssaiUpfInfoItem) SetDnnUpfInfoListId(v int32) {
	o.DnnUpfInfoListId = &v
}

func (o SnssaiUpfInfoItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnssaiUpfInfoItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sNssai"] = o.SNssai
	if !IsNil(o.DnnUpfInfoList) {
		toSerialize["dnnUpfInfoList"] = o.DnnUpfInfoList
	}
	if !IsNil(o.RedundantTransport) {
		toSerialize["redundantTransport"] = o.RedundantTransport
	}
	if !IsNil(o.InterfaceUpfInfoList) {
		toSerialize["interfaceUpfInfoList"] = o.InterfaceUpfInfoList
	}
	if !IsNil(o.DnnUpfInfoListId) {
		toSerialize["dnnUpfInfoListId"] = o.DnnUpfInfoListId
	}
	return toSerialize, nil
}

func (o *SnssaiUpfInfoItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sNssai",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnssaiUpfInfoItem := _SnssaiUpfInfoItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnssaiUpfInfoItem)

	if err != nil {
		return err
	}

	*o = SnssaiUpfInfoItem(varSnssaiUpfInfoItem)

	return err
}

type NullableSnssaiUpfInfoItem struct {
	value *SnssaiUpfInfoItem
	isSet bool
}

func (v NullableSnssaiUpfInfoItem) Get() *SnssaiUpfInfoItem {
	return v.value
}

func (v *NullableSnssaiUpfInfoItem) Set(val *SnssaiUpfInfoItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSnssaiUpfInfoItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSnssaiUpfInfoItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnssaiUpfInfoItem(val *SnssaiUpfInfoItem) *NullableSnssaiUpfInfoItem {
	return &NullableSnssaiUpfInfoItem{value: val, isSet: true}
}

func (v NullableSnssaiUpfInfoItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnssaiUpfInfoItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
