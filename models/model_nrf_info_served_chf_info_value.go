/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// NrfInfoServedChfInfoValue struct for NrfInfoServedChfInfoValue
type NrfInfoServedChfInfoValue struct {
	ChfInfo *ChfInfo
	AdditionalProperties *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NrfInfoServedChfInfoValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ChfInfo
	err = json.Unmarshal(data, &dst.ChfInfo);
	if err == nil {
		jsonChfInfo, _ := json.Marshal(dst.ChfInfo)
		if string(jsonChfInfo) == "{}" { // empty struct
			dst.ChfInfo = nil
		} else {
			return nil // data stored in dst.ChfInfo, return on the first match
		}
	} else {
		dst.ChfInfo = nil
	}

	// try to unmarshal JSON data into map[string]interface{}
	err = json.Unmarshal(data, &dst.AdditionalProperties);
	if err == nil {
		jsonAdditionalProperties, _ := json.Marshal(dst.AdditionalProperties)
		if string(jsonAdditionalProperties) == "{}" { // empty struct
			dst.AdditionalProperties = nil
		} else {
			return nil // data stored in dst.AdditionalProperties, return on the first match
		}
	} else {
		dst.AdditionalProperties = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(NrfInfoServedChfInfoValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NrfInfoServedChfInfoValue) MarshalJSON() ([]byte, error) {
	if src.ChfInfo != nil {
		return json.Marshal(&src.ChfInfo)
	}

	if src.AdditionalProperties != nil {
		return json.Marshal(&src.AdditionalProperties)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableNrfInfoServedChfInfoValue struct {
	value *NrfInfoServedChfInfoValue
	isSet bool
}

func (v NullableNrfInfoServedChfInfoValue) Get() *NrfInfoServedChfInfoValue {
	return v.value
}

func (v *NullableNrfInfoServedChfInfoValue) Set(val *NrfInfoServedChfInfoValue) {
	v.value = val
	v.isSet = true
}

func (v NullableNrfInfoServedChfInfoValue) IsSet() bool {
	return v.isSet
}

func (v *NullableNrfInfoServedChfInfoValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNrfInfoServedChfInfoValue(val *NrfInfoServedChfInfoValue) *NullableNrfInfoServedChfInfoValue {
	return &NullableNrfInfoServedChfInfoValue{value: val, isSet: true}
}

func (v NullableNrfInfoServedChfInfoValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNrfInfoServedChfInfoValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


