// Copyright 2019 Communication Service/Software Laboratory, National Chiao Tung University (free5gc.org)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * NRF NFManagement Service
 *
 * NRF NFManagement Service
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"encoding/json"
	"fmt"
)

type NfType string

// List of NFType
const (
	NfType_NRF      NfType = "NRF"
	NfType_UDM      NfType = "UDM"
	NfType_AMF      NfType = "AMF"
	NfType_SMF      NfType = "SMF"
	NfType_AUSF     NfType = "AUSF"
	NfType_NEF      NfType = "NEF"
	NfType_PCF      NfType = "PCF"
	NfType_SMSF     NfType = "SMSF"
	NfType_NSSF     NfType = "NSSF"
	NfType_UDR      NfType = "UDR"
	NfType_LMF      NfType = "LMF"
	NfType_GMLC     NfType = "GMLC"
	NfType__5_G_EIR NfType = "5G_EIR"
	NfType_SEPP     NfType = "SEPP"
	NfType_UPF      NfType = "UPF"
	NfType_N3_IWF   NfType = "N3IWF"
	NfType_AF       NfType = "AF"
	NfType_UDSF     NfType = "UDSF"
	NfType_BSF      NfType = "BSF"
	NfType_CHF      NfType = "CHF"
	NfType_NWDAF    NfType = "NWDAF"
)

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NfType) UnmarshalJSON(data []byte) error {
	var err error
	var str string
	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &str)
	if err == nil {
		*dst = NfType(str)
		return nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(NFType)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NfType) MarshalJSON() ([]byte, error) {
	return json.Marshal(string(src))
}

type NullableNfType struct {
	value *NfType
	isSet bool
}

func (v NullableNfType) Get() *NfType {
	return v.value
}

func (v *NullableNfType) Set(val *NfType) {
	v.value = val
	v.isSet = true
}

func (v NullableNfType) IsSet() bool {
	return v.isSet
}

func (v *NullableNfType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfType(val *NfType) *NullableNfType {
	return &NullableNfType{value: val, isSet: true}
}

func (v NullableNfType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
