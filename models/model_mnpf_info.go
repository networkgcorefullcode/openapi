// Copyright 2019 Communication Service/Software Laboratory, National Chiao Tung University (free5gc.org)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * NRF NFManagement Service
 *
 * MnpfInfo type definition
 *
 * API version: 1.4.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// MnpfInfo represents MNPF information
type MnpfInfo struct {
	MsisdnRanges []IdentityRange `json:"msisdnRanges"`
}

type _MnpfInfo MnpfInfo

// NewMnpfInfo instantiates a new MnpfInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMnpfInfo(msisdnRanges []IdentityRange) *MnpfInfo {
	this := MnpfInfo{}
	this.MsisdnRanges = msisdnRanges
	return &this
}

// NewMnpfInfoWithDefaults instantiates a new MnpfInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMnpfInfoWithDefaults() *MnpfInfo {
	this := MnpfInfo{}
	return &this
}

// GetMsisdnRanges returns the MsisdnRanges field value
func (o *MnpfInfo) GetMsisdnRanges() []IdentityRange {
	if o == nil {
		var ret []IdentityRange
		return ret
	}

	return o.MsisdnRanges
}

// GetMsisdnRangesOk returns a tuple with the MsisdnRanges field value
// and a boolean to check if the value has been set.
func (o *MnpfInfo) GetMsisdnRangesOk() ([]IdentityRange, bool) {
	if o == nil {
		return nil, false
	}
	return o.MsisdnRanges, true
}

// SetMsisdnRanges sets field value
func (o *MnpfInfo) SetMsisdnRanges(v []IdentityRange) {
	o.MsisdnRanges = v
}

func (o MnpfInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MnpfInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msisdnRanges"] = o.MsisdnRanges
	return toSerialize, nil
}

func (o *MnpfInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msisdnRanges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMnpfInfo := _MnpfInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMnpfInfo)

	if err != nil {
		return err
	}

	*o = MnpfInfo(varMnpfInfo)

	return err
}

type NullableMnpfInfo struct {
	value *MnpfInfo
	isSet bool
}

func (v NullableMnpfInfo) Get() *MnpfInfo {
	return v.value
}

func (v *NullableMnpfInfo) Set(val *MnpfInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMnpfInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMnpfInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMnpfInfo(val *MnpfInfo) *NullableMnpfInfo {
	return &NullableMnpfInfo{value: val, isSet: true}
}

func (v NullableMnpfInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMnpfInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
