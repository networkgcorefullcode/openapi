// Copyright 2019 Communication Service/Software Laboratory, National Chiao Tung University (free5gc.org)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * NRF NFManagement Service
 *
 * RuleSet type definition
 *
 * API version: 1.4.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// RuleSet List of rules specifying whether access/scopes are allowed/denied for NF-Consumers.
type RuleSet struct {
	Priority    int32         `json:"priority" yaml:"priority" bson:"priority" mapstructure:"Priority"`
	Plmns       []PlmnId      `json:"plmns,omitempty" yaml:"plmns" bson:"plmns" mapstructure:"Plmns"`
	Snpns       []PlmnIdNid   `json:"snpns,omitempty" yaml:"snpns" bson:"snpns" mapstructure:"Snpns"`
	NfTypes     []NfType      `json:"nfTypes,omitempty" yaml:"nfTypes" bson:"nfTypes" mapstructure:"NfTypes"`
	NfDomains   []string      `json:"nfDomains,omitempty" yaml:"nfDomains" bson:"nfDomains" mapstructure:"NfDomains"`
	Nssais      []ExtSnssai   `json:"nssais,omitempty" yaml:"nssais" bson:"nssais" mapstructure:"Nssais"`
	NfInstances []string      `json:"nfInstances,omitempty" yaml:"nfInstances" bson:"nfInstances" mapstructure:"NfInstances"`
	Scopes      []string      `json:"scopes,omitempty" yaml:"scopes" bson:"scopes" mapstructure:"Scopes"`
	Action      RuleSetAction `json:"action" yaml:"action" bson:"action" mapstructure:"Action"`
}

type _RuleSet RuleSet

// NewRuleSet instantiates a new RuleSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleSet(priority int32, action RuleSetAction) *RuleSet {
	this := RuleSet{}
	this.Priority = priority
	this.Action = action
	return &this
}

// NewRuleSetWithDefaults instantiates a new RuleSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleSetWithDefaults() *RuleSet {
	this := RuleSet{}
	return &this
}

// GetPriority returns the Priority field value
func (o *RuleSet) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *RuleSet) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *RuleSet) SetPriority(v int32) {
	o.Priority = v
}

// GetPlmns returns the Plmns field value if set, zero value otherwise.
func (o *RuleSet) GetPlmns() []PlmnId {
	if o == nil || IsNil(o.Plmns) {
		var ret []PlmnId
		return ret
	}
	return o.Plmns
}

// GetPlmnsOk returns a tuple with the Plmns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetPlmnsOk() ([]PlmnId, bool) {
	if o == nil || IsNil(o.Plmns) {
		return nil, false
	}
	return o.Plmns, true
}

// HasPlmns returns a boolean if a field has been set.
func (o *RuleSet) HasPlmns() bool {
	if o != nil && !IsNil(o.Plmns) {
		return true
	}

	return false
}

// SetPlmns gets a reference to the given []PlmnId and assigns it to the Plmns field.
func (o *RuleSet) SetPlmns(v []PlmnId) {
	o.Plmns = v
}

// GetSnpns returns the Snpns field value if set, zero value otherwise.
func (o *RuleSet) GetSnpns() []PlmnIdNid {
	if o == nil || IsNil(o.Snpns) {
		var ret []PlmnIdNid
		return ret
	}
	return o.Snpns
}

// GetSnpnsOk returns a tuple with the Snpns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetSnpnsOk() ([]PlmnIdNid, bool) {
	if o == nil || IsNil(o.Snpns) {
		return nil, false
	}
	return o.Snpns, true
}

// HasSnpns returns a boolean if a field has been set.
func (o *RuleSet) HasSnpns() bool {
	if o != nil && !IsNil(o.Snpns) {
		return true
	}

	return false
}

// SetSnpns gets a reference to the given []PlmnIdNid and assigns it to the Snpns field.
func (o *RuleSet) SetSnpns(v []PlmnIdNid) {
	o.Snpns = v
}

// GetNfTypes returns the NfTypes field value if set, zero value otherwise.
func (o *RuleSet) GetNfTypes() []NfType {
	if o == nil || IsNil(o.NfTypes) {
		var ret []NfType
		return ret
	}
	return o.NfTypes
}

// GetNfTypesOk returns a tuple with the NfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetNfTypesOk() ([]NfType, bool) {
	if o == nil || IsNil(o.NfTypes) {
		return nil, false
	}
	return o.NfTypes, true
}

// HasNfTypes returns a boolean if a field has been set.
func (o *RuleSet) HasNfTypes() bool {
	if o != nil && !IsNil(o.NfTypes) {
		return true
	}

	return false
}

// SetNfTypes gets a reference to the given []NfType and assigns it to the NfTypes field.
func (o *RuleSet) SetNfTypes(v []NfType) {
	o.NfTypes = v
}

// GetNfDomains returns the NfDomains field value if set, zero value otherwise.
func (o *RuleSet) GetNfDomains() []string {
	if o == nil || IsNil(o.NfDomains) {
		var ret []string
		return ret
	}
	return o.NfDomains
}

// GetNfDomainsOk returns a tuple with the NfDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetNfDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.NfDomains) {
		return nil, false
	}
	return o.NfDomains, true
}

// HasNfDomains returns a boolean if a field has been set.
func (o *RuleSet) HasNfDomains() bool {
	if o != nil && !IsNil(o.NfDomains) {
		return true
	}

	return false
}

// SetNfDomains gets a reference to the given []string and assigns it to the NfDomains field.
func (o *RuleSet) SetNfDomains(v []string) {
	o.NfDomains = v
}

// GetNssais returns the Nssais field value if set, zero value otherwise.
func (o *RuleSet) GetNssais() []ExtSnssai {
	if o == nil || IsNil(o.Nssais) {
		var ret []ExtSnssai
		return ret
	}
	return o.Nssais
}

// GetNssaisOk returns a tuple with the Nssais field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetNssaisOk() ([]ExtSnssai, bool) {
	if o == nil || IsNil(o.Nssais) {
		return nil, false
	}
	return o.Nssais, true
}

// HasNssais returns a boolean if a field has been set.
func (o *RuleSet) HasNssais() bool {
	if o != nil && !IsNil(o.Nssais) {
		return true
	}

	return false
}

// SetNssais gets a reference to the given []ExtSnssai and assigns it to the Nssais field.
func (o *RuleSet) SetNssais(v []ExtSnssai) {
	o.Nssais = v
}

// GetNfInstances returns the NfInstances field value if set, zero value otherwise.
func (o *RuleSet) GetNfInstances() []string {
	if o == nil || IsNil(o.NfInstances) {
		var ret []string
		return ret
	}
	return o.NfInstances
}

// GetNfInstancesOk returns a tuple with the NfInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetNfInstancesOk() ([]string, bool) {
	if o == nil || IsNil(o.NfInstances) {
		return nil, false
	}
	return o.NfInstances, true
}

// HasNfInstances returns a boolean if a field has been set.
func (o *RuleSet) HasNfInstances() bool {
	if o != nil && !IsNil(o.NfInstances) {
		return true
	}

	return false
}

// SetNfInstances gets a reference to the given []string and assigns it to the NfInstances field.
func (o *RuleSet) SetNfInstances(v []string) {
	o.NfInstances = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *RuleSet) GetScopes() []string {
	if o == nil || IsNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *RuleSet) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *RuleSet) SetScopes(v []string) {
	o.Scopes = v
}

// GetAction returns the Action field value
func (o *RuleSet) GetAction() RuleSetAction {
	if o == nil {
		var ret RuleSetAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *RuleSet) GetActionOk() (*RuleSetAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *RuleSet) SetAction(v RuleSetAction) {
	o.Action = v
}

func (o RuleSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["priority"] = o.Priority
	if !IsNil(o.Plmns) {
		toSerialize["plmns"] = o.Plmns
	}
	if !IsNil(o.Snpns) {
		toSerialize["snpns"] = o.Snpns
	}
	if !IsNil(o.NfTypes) {
		toSerialize["nfTypes"] = o.NfTypes
	}
	if !IsNil(o.NfDomains) {
		toSerialize["nfDomains"] = o.NfDomains
	}
	if !IsNil(o.Nssais) {
		toSerialize["nssais"] = o.Nssais
	}
	if !IsNil(o.NfInstances) {
		toSerialize["nfInstances"] = o.NfInstances
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	toSerialize["action"] = o.Action
	return toSerialize, nil
}

func (o *RuleSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"priority",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleSet := _RuleSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRuleSet)

	if err != nil {
		return err
	}

	*o = RuleSet(varRuleSet)

	return err
}

type NullableRuleSet struct {
	value *RuleSet
	isSet bool
}

func (v NullableRuleSet) Get() *RuleSet {
	return v.value
}

func (v *NullableRuleSet) Set(val *RuleSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSet(val *RuleSet) *NullableRuleSet {
	return &NullableRuleSet{value: val, isSet: true}
}

func (v NullableRuleSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
