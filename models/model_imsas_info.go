/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImsasInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImsasInfo{}

// ImsasInfo Information of an IMS AS NF Instance
type ImsasInfo struct {
	ImsEventList []ImsEvent `json:"imsEventList"`
}

type _ImsasInfo ImsasInfo

// NewImsasInfo instantiates a new ImsasInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImsasInfo(imsEventList []ImsEvent) *ImsasInfo {
	this := ImsasInfo{}
	this.ImsEventList = imsEventList
	return &this
}

// NewImsasInfoWithDefaults instantiates a new ImsasInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImsasInfoWithDefaults() *ImsasInfo {
	this := ImsasInfo{}
	return &this
}

// GetImsEventList returns the ImsEventList field value
func (o *ImsasInfo) GetImsEventList() []ImsEvent {
	if o == nil {
		var ret []ImsEvent
		return ret
	}

	return o.ImsEventList
}

// GetImsEventListOk returns a tuple with the ImsEventList field value
// and a boolean to check if the value has been set.
func (o *ImsasInfo) GetImsEventListOk() ([]ImsEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImsEventList, true
}

// SetImsEventList sets field value
func (o *ImsasInfo) SetImsEventList(v []ImsEvent) {
	o.ImsEventList = v
}

func (o ImsasInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImsasInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imsEventList"] = o.ImsEventList
	return toSerialize, nil
}

func (o *ImsasInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imsEventList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImsasInfo := _ImsasInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImsasInfo)

	if err != nil {
		return err
	}

	*o = ImsasInfo(varImsasInfo)

	return err
}

type NullableImsasInfo struct {
	value *ImsasInfo
	isSet bool
}

func (v NullableImsasInfo) Get() *ImsasInfo {
	return v.value
}

func (v *NullableImsasInfo) Set(val *ImsasInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableImsasInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableImsasInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImsasInfo(val *ImsasInfo) *NullableImsasInfo {
	return &NullableImsasInfo{value: val, isSet: true}
}

func (v NullableImsasInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImsasInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
