/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the A2xCapability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &A2xCapability{}

// A2xCapability Indicate the supported A2X Capability by the PCF.
type A2xCapability struct {
	LteA2x *bool `json:"lteA2x,omitempty"`
	NrA2x  *bool `json:"nrA2x,omitempty"`
}

// NewA2xCapability instantiates a new A2xCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewA2xCapability() *A2xCapability {
	this := A2xCapability{}
	var lteA2x bool = false
	this.LteA2x = &lteA2x
	var nrA2x bool = false
	this.NrA2x = &nrA2x
	return &this
}

// NewA2xCapabilityWithDefaults instantiates a new A2xCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewA2xCapabilityWithDefaults() *A2xCapability {
	this := A2xCapability{}
	var lteA2x bool = false
	this.LteA2x = &lteA2x
	var nrA2x bool = false
	this.NrA2x = &nrA2x
	return &this
}

// GetLteA2x returns the LteA2x field value if set, zero value otherwise.
func (o *A2xCapability) GetLteA2x() bool {
	if o == nil || IsNil(o.LteA2x) {
		var ret bool
		return ret
	}
	return *o.LteA2x
}

// GetLteA2xOk returns a tuple with the LteA2x field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2xCapability) GetLteA2xOk() (*bool, bool) {
	if o == nil || IsNil(o.LteA2x) {
		return nil, false
	}
	return o.LteA2x, true
}

// HasLteA2x returns a boolean if a field has been set.
func (o *A2xCapability) HasLteA2x() bool {
	if o != nil && !IsNil(o.LteA2x) {
		return true
	}

	return false
}

// SetLteA2x gets a reference to the given bool and assigns it to the LteA2x field.
func (o *A2xCapability) SetLteA2x(v bool) {
	o.LteA2x = &v
}

// GetNrA2x returns the NrA2x field value if set, zero value otherwise.
func (o *A2xCapability) GetNrA2x() bool {
	if o == nil || IsNil(o.NrA2x) {
		var ret bool
		return ret
	}
	return *o.NrA2x
}

// GetNrA2xOk returns a tuple with the NrA2x field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *A2xCapability) GetNrA2xOk() (*bool, bool) {
	if o == nil || IsNil(o.NrA2x) {
		return nil, false
	}
	return o.NrA2x, true
}

// HasNrA2x returns a boolean if a field has been set.
func (o *A2xCapability) HasNrA2x() bool {
	if o != nil && !IsNil(o.NrA2x) {
		return true
	}

	return false
}

// SetNrA2x gets a reference to the given bool and assigns it to the NrA2x field.
func (o *A2xCapability) SetNrA2x(v bool) {
	o.NrA2x = &v
}

func (o A2xCapability) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o A2xCapability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LteA2x) {
		toSerialize["lteA2x"] = o.LteA2x
	}
	if !IsNil(o.NrA2x) {
		toSerialize["nrA2x"] = o.NrA2x
	}
	return toSerialize, nil
}

type NullableA2xCapability struct {
	value *A2xCapability
	isSet bool
}

func (v NullableA2xCapability) Get() *A2xCapability {
	return v.value
}

func (v *NullableA2xCapability) Set(val *A2xCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableA2xCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableA2xCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableA2xCapability(val *A2xCapability) *NullableA2xCapability {
	return &NullableA2xCapability{value: val, isSet: true}
}

func (v NullableA2xCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableA2xCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
