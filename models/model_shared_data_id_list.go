/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// SharedDataIdList Shared Data IDs
type SharedDataIdList struct {
	SharedDataIds []string `json:"sharedDataIds"`
}

type _SharedDataIdList SharedDataIdList

// NewSharedDataIdList instantiates a new SharedDataIdList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedDataIdList(sharedDataIds []string) *SharedDataIdList {
	this := SharedDataIdList{}
	this.SharedDataIds = sharedDataIds
	return &this
}

// NewSharedDataIdListWithDefaults instantiates a new SharedDataIdList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDataIdListWithDefaults() *SharedDataIdList {
	this := SharedDataIdList{}
	return &this
}

// GetSharedDataIds returns the SharedDataIds field value
func (o *SharedDataIdList) GetSharedDataIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SharedDataIds
}

// GetSharedDataIdsOk returns a tuple with the SharedDataIds field value
// and a boolean to check if the value has been set.
func (o *SharedDataIdList) GetSharedDataIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedDataIds, true
}

// SetSharedDataIds sets field value
func (o *SharedDataIdList) SetSharedDataIds(v []string) {
	o.SharedDataIds = v
}

func (o SharedDataIdList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedDataIdList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sharedDataIds"] = o.SharedDataIds
	return toSerialize, nil
}

func (o *SharedDataIdList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sharedDataIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedDataIdList := _SharedDataIdList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharedDataIdList)

	if err != nil {
		return err
	}

	*o = SharedDataIdList(varSharedDataIdList)

	return err
}

type NullableSharedDataIdList struct {
	value *SharedDataIdList
	isSet bool
}

func (v NullableSharedDataIdList) Get() *SharedDataIdList {
	return v.value
}

func (v *NullableSharedDataIdList) Set(val *SharedDataIdList) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedDataIdList) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedDataIdList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedDataIdList(val *SharedDataIdList) *NullableSharedDataIdList {
	return &NullableSharedDataIdList{value: val, isSet: true}
}

func (v NullableSharedDataIdList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedDataIdList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
