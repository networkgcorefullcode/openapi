/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// SharedScope Authorized Scope for a Shared Data
type SharedScope struct {
	NfSetIdList []string `json:"nfSetIdList,omitempty"`
}

// NewSharedScope instantiates a new SharedScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedScope() *SharedScope {
	this := SharedScope{}
	return &this
}

// NewSharedScopeWithDefaults instantiates a new SharedScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedScopeWithDefaults() *SharedScope {
	this := SharedScope{}
	return &this
}

// GetNfSetIdList returns the NfSetIdList field value if set, zero value otherwise.
func (o *SharedScope) GetNfSetIdList() []string {
	if o == nil || IsNil(o.NfSetIdList) {
		var ret []string
		return ret
	}
	return o.NfSetIdList
}

// GetNfSetIdListOk returns a tuple with the NfSetIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedScope) GetNfSetIdListOk() ([]string, bool) {
	if o == nil || IsNil(o.NfSetIdList) {
		return nil, false
	}
	return o.NfSetIdList, true
}

// HasNfSetIdList returns a boolean if a field has been set.
func (o *SharedScope) HasNfSetIdList() bool {
	if o != nil && !IsNil(o.NfSetIdList) {
		return true
	}

	return false
}

// SetNfSetIdList gets a reference to the given []string and assigns it to the NfSetIdList field.
func (o *SharedScope) SetNfSetIdList(v []string) {
	o.NfSetIdList = v
}

func (o SharedScope) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NfSetIdList) {
		toSerialize["nfSetIdList"] = o.NfSetIdList
	}
	return toSerialize, nil
}

type NullableSharedScope struct {
	value *SharedScope
	isSet bool
}

func (v NullableSharedScope) Get() *SharedScope {
	return v.value
}

func (v *NullableSharedScope) Set(val *SharedScope) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedScope) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedScope(val *SharedScope) *NullableSharedScope {
	return &NullableSharedScope{value: val, isSet: true}
}

func (v NullableSharedScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
