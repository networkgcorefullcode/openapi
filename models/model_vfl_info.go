/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// VflInfo Vertical Federated Learning information
type VflInfo struct {
	MlAnalyticsIds    []NwdafEvent      `json:"mlAnalyticsIds"`
	VflCapabilityType VflCapabilityType `json:"vflCapabilityType"`
}

type _VflInfo VflInfo

// NewVflInfo instantiates a new VflInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVflInfo(mlAnalyticsIds []NwdafEvent, vflCapabilityType VflCapabilityType) *VflInfo {
	this := VflInfo{}
	this.MlAnalyticsIds = mlAnalyticsIds
	this.VflCapabilityType = vflCapabilityType
	return &this
}

// NewVflInfoWithDefaults instantiates a new VflInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVflInfoWithDefaults() *VflInfo {
	this := VflInfo{}
	return &this
}

// GetMlAnalyticsIds returns the MlAnalyticsIds field value
func (o *VflInfo) GetMlAnalyticsIds() []NwdafEvent {
	if o == nil {
		var ret []NwdafEvent
		return ret
	}

	return o.MlAnalyticsIds
}

// GetMlAnalyticsIdsOk returns a tuple with the MlAnalyticsIds field value
// and a boolean to check if the value has been set.
func (o *VflInfo) GetMlAnalyticsIdsOk() ([]NwdafEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.MlAnalyticsIds, true
}

// SetMlAnalyticsIds sets field value
func (o *VflInfo) SetMlAnalyticsIds(v []NwdafEvent) {
	o.MlAnalyticsIds = v
}

// GetVflCapabilityType returns the VflCapabilityType field value
func (o *VflInfo) GetVflCapabilityType() VflCapabilityType {
	if o == nil {
		var ret VflCapabilityType
		return ret
	}

	return o.VflCapabilityType
}

// GetVflCapabilityTypeOk returns a tuple with the VflCapabilityType field value
// and a boolean to check if the value has been set.
func (o *VflInfo) GetVflCapabilityTypeOk() (*VflCapabilityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VflCapabilityType, true
}

// SetVflCapabilityType sets field value
func (o *VflInfo) SetVflCapabilityType(v VflCapabilityType) {
	o.VflCapabilityType = v
}

func (o VflInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VflInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mlAnalyticsIds"] = o.MlAnalyticsIds
	toSerialize["vflCapabilityType"] = o.VflCapabilityType
	return toSerialize, nil
}

func (o *VflInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mlAnalyticsIds",
		"vflCapabilityType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVflInfo := _VflInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVflInfo)

	if err != nil {
		return err
	}

	*o = VflInfo(varVflInfo)

	return err
}

type NullableVflInfo struct {
	value *VflInfo
	isSet bool
}

func (v NullableVflInfo) Get() *VflInfo {
	return v.value
}

func (v *NullableVflInfo) Set(val *VflInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVflInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVflInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVflInfo(val *VflInfo) *NullableVflInfo {
	return &NullableVflInfo{value: val, isSet: true}
}

func (v NullableVflInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVflInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
