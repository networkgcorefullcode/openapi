/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ConditionGroup List (array) of conditions (joined by the \"and\" or \"or\" logical relationship), under which an NF Instance with an NfStatus or NFServiceStatus value set to, \"CANARY_RELEASE\", or with a \"canaryRelease\" attribute set to true, shall be selected by an NF Service Consumer.
type ConditionGroup struct {
	And []SelectionConditions `json:"and,omitempty"`
	Or  []SelectionConditions `json:"or,omitempty"`
}

// NewConditionGroup instantiates a new ConditionGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionGroup() *ConditionGroup {
	this := ConditionGroup{}
	return &this
}

// NewConditionGroupWithDefaults instantiates a new ConditionGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionGroupWithDefaults() *ConditionGroup {
	this := ConditionGroup{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *ConditionGroup) GetAnd() []SelectionConditions {
	if o == nil || IsNil(o.And) {
		var ret []SelectionConditions
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionGroup) GetAndOk() ([]SelectionConditions, bool) {
	if o == nil || IsNil(o.And) {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *ConditionGroup) HasAnd() bool {
	if o != nil && !IsNil(o.And) {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []SelectionConditions and assigns it to the And field.
func (o *ConditionGroup) SetAnd(v []SelectionConditions) {
	o.And = v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *ConditionGroup) GetOr() []SelectionConditions {
	if o == nil || IsNil(o.Or) {
		var ret []SelectionConditions
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionGroup) GetOrOk() ([]SelectionConditions, bool) {
	if o == nil || IsNil(o.Or) {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *ConditionGroup) HasOr() bool {
	if o != nil && !IsNil(o.Or) {
		return true
	}

	return false
}

// SetOr gets a reference to the given []SelectionConditions and assigns it to the Or field.
func (o *ConditionGroup) SetOr(v []SelectionConditions) {
	o.Or = v
}

func (o ConditionGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.And) {
		toSerialize["and"] = o.And
	}
	if !IsNil(o.Or) {
		toSerialize["or"] = o.Or
	}
	return toSerialize, nil
}

type NullableConditionGroup struct {
	value *ConditionGroup
	isSet bool
}

func (v NullableConditionGroup) Get() *ConditionGroup {
	return v.value
}

func (v *NullableConditionGroup) Set(val *ConditionGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionGroup(val *ConditionGroup) *NullableConditionGroup {
	return &NullableConditionGroup{value: val, isSet: true}
}

func (v NullableConditionGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
