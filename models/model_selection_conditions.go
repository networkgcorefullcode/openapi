/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SelectionConditions - It contains the set of conditions that shall be evaluated to determine whether a consumer shall select a given producer. The producer shall only be selected if the evaluation of the conditions is <true>. The set of conditions can be represented by a single  ConditionItem or by a ConditionGroup, where the latter contains a (recursive) list of conditions joined by the \"and\" or \"or\" logical relationships.
type SelectionConditions struct {
	ConditionGroup *ConditionGroup
	ConditionItem  *ConditionItem
}

// ConditionGroupAsSelectionConditions is a convenience function that returns ConditionGroup wrapped in SelectionConditions
func ConditionGroupAsSelectionConditions(v *ConditionGroup) SelectionConditions {
	return SelectionConditions{
		ConditionGroup: v,
	}
}

// ConditionItemAsSelectionConditions is a convenience function that returns ConditionItem wrapped in SelectionConditions
func ConditionItemAsSelectionConditions(v *ConditionItem) SelectionConditions {
	return SelectionConditions{
		ConditionItem: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SelectionConditions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConditionGroup
	err = newStrictDecoder(data).Decode(&dst.ConditionGroup)
	if err == nil {
		jsonConditionGroup, _ := json.Marshal(dst.ConditionGroup)
		if string(jsonConditionGroup) == "{}" { // empty struct
			dst.ConditionGroup = nil
		} else {
			match++
		}
	} else {
		dst.ConditionGroup = nil
	}

	// try to unmarshal data into ConditionItem
	err = newStrictDecoder(data).Decode(&dst.ConditionItem)
	if err == nil {
		jsonConditionItem, _ := json.Marshal(dst.ConditionItem)
		if string(jsonConditionItem) == "{}" { // empty struct
			dst.ConditionItem = nil
		} else {
			match++
		}
	} else {
		dst.ConditionItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConditionGroup = nil
		dst.ConditionItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SelectionConditions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SelectionConditions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SelectionConditions) MarshalJSON() ([]byte, error) {
	if src.ConditionGroup != nil {
		return json.Marshal(&src.ConditionGroup)
	}

	if src.ConditionItem != nil {
		return json.Marshal(&src.ConditionItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SelectionConditions) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ConditionGroup != nil {
		return obj.ConditionGroup
	}

	if obj.ConditionItem != nil {
		return obj.ConditionItem
	}

	// all schemas are nil
	return nil
}

type NullableSelectionConditions struct {
	value *SelectionConditions
	isSet bool
}

func (v NullableSelectionConditions) Get() *SelectionConditions {
	return v.value
}

func (v *NullableSelectionConditions) Set(val *SelectionConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionConditions(val *SelectionConditions) *NullableSelectionConditions {
	return &NullableSelectionConditions{value: val, isSet: true}
}

func (v NullableSelectionConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
