// Copyright 2019 Communication Service/Software Laboratory, National Chiao Tung University (free5gc.org)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * NRF NFManagement Service
 *
 * NefInfo type definition
 *
 * API version: 1.4.0-alpha.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import "encoding/json"

// NefInfo Information of an NEF NF Instance
type NefInfo struct {
	// Identity of the NEF
	NefId *string `json:"nefId,omitempty" yaml:"nefId" bson:"nefId" mapstructure:"NefId"`
	// PfdData is already defined in the project, so we'll reference it without redeclaring
	GpsiRanges                     []IdentityRange      `json:"gpsiRanges,omitempty" yaml:"gpsiRanges" bson:"gpsiRanges" mapstructure:"GpsiRanges"`
	ExternalGroupIdentifiersRanges []IdentityRange      `json:"externalGroupIdentifiersRanges,omitempty" yaml:"externalGroupIdentifiersRanges" bson:"externalGroupIdentifiersRanges" mapstructure:"ExternalGroupIdentifiersRanges"`
	ServedFqdnList                 []string             `json:"servedFqdnList,omitempty" yaml:"servedFqdnList" bson:"servedFqdnList" mapstructure:"ServedFqdnList"`
	TaiList                        []Tai                `json:"taiList,omitempty" yaml:"taiList" bson:"taiList" mapstructure:"TaiList"`
	TaiRangeList                   []TaiRange           `json:"taiRangeList,omitempty" yaml:"taiRangeList" bson:"taiRangeList" mapstructure:"TaiRangeList"`
	DnaiList                       []string             `json:"dnaiList,omitempty" yaml:"dnaiList" bson:"dnaiList" mapstructure:"DnaiList"`
	UnTrustAfInfoList              []UnTrustAfInfo      `json:"unTrustAfInfoList,omitempty" yaml:"unTrustAfInfoList" bson:"unTrustAfInfoList" mapstructure:"UnTrustAfInfoList"`
	UasNfFunctionalityInd          *bool                `json:"uasNfFunctionalityInd,omitempty" yaml:"uasNfFunctionalityInd" bson:"uasNfFunctionalityInd" mapstructure:"UasNfFunctionalityInd"`
	MultiMemAfSessQosInd           *bool                `json:"multiMemAfSessQosInd,omitempty" yaml:"multiMemAfSessQosInd" bson:"multiMemAfSessQosInd" mapstructure:"MultiMemAfSessQosInd"`
	MemberUESelAssistInd           *bool                `json:"memberUESelAssistInd,omitempty" yaml:"memberUESelAssistInd" bson:"memberUESelAssistInd" mapstructure:"MemberUESelAssistInd"`
	PfdData                        *PfdData             `json:"pfdData,omitempty"`
	AfEeData                       *AfEventExposureData `json:"afEeData,omitempty"`
}

// NewNefInfo instantiates a new NefInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNefInfo() *NefInfo {
	this := NefInfo{}
	var uasNfFunctionalityInd bool = false
	this.UasNfFunctionalityInd = &uasNfFunctionalityInd
	var multiMemAfSessQosInd bool = false
	this.MultiMemAfSessQosInd = &multiMemAfSessQosInd
	var memberUESelAssistInd bool = false
	this.MemberUESelAssistInd = &memberUESelAssistInd
	return &this
}

// NewNefInfoWithDefaults instantiates a new NefInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNefInfoWithDefaults() *NefInfo {
	this := NefInfo{}
	var uasNfFunctionalityInd bool = false
	this.UasNfFunctionalityInd = &uasNfFunctionalityInd
	var multiMemAfSessQosInd bool = false
	this.MultiMemAfSessQosInd = &multiMemAfSessQosInd
	var memberUESelAssistInd bool = false
	this.MemberUESelAssistInd = &memberUESelAssistInd
	return &this
}

// GetNefId returns the NefId field value if set, zero value otherwise.
func (o *NefInfo) GetNefId() string {
	if o == nil || IsNil(o.NefId) {
		var ret string
		return ret
	}
	return *o.NefId
}

// GetNefIdOk returns a tuple with the NefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetNefIdOk() (*string, bool) {
	if o == nil || IsNil(o.NefId) {
		return nil, false
	}
	return o.NefId, true
}

// HasNefId returns a boolean if a field has been set.
func (o *NefInfo) HasNefId() bool {
	if o != nil && !IsNil(o.NefId) {
		return true
	}

	return false
}

// SetNefId gets a reference to the given string and assigns it to the NefId field.
func (o *NefInfo) SetNefId(v string) {
	o.NefId = &v
}

// GetPfdData returns the PfdData field value if set, zero value otherwise.
func (o *NefInfo) GetPfdData() PfdData {
	if o == nil || IsNil(o.PfdData) {
		var ret PfdData
		return ret
	}
	return *o.PfdData
}

// GetPfdDataOk returns a tuple with the PfdData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetPfdDataOk() (*PfdData, bool) {
	if o == nil || IsNil(o.PfdData) {
		return nil, false
	}
	return o.PfdData, true
}

// HasPfdData returns a boolean if a field has been set.
func (o *NefInfo) HasPfdData() bool {
	if o != nil && !IsNil(o.PfdData) {
		return true
	}

	return false
}

// SetPfdData gets a reference to the given PfdData and assigns it to the PfdData field.
func (o *NefInfo) SetPfdData(v PfdData) {
	o.PfdData = &v
}

// GetAfEeData returns the AfEeData field value if set, zero value otherwise.
func (o *NefInfo) GetAfEeData() AfEventExposureData {
	if o == nil || IsNil(o.AfEeData) {
		var ret AfEventExposureData
		return ret
	}
	return *o.AfEeData
}

// GetAfEeDataOk returns a tuple with the AfEeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetAfEeDataOk() (*AfEventExposureData, bool) {
	if o == nil || IsNil(o.AfEeData) {
		return nil, false
	}
	return o.AfEeData, true
}

// HasAfEeData returns a boolean if a field has been set.
func (o *NefInfo) HasAfEeData() bool {
	if o != nil && !IsNil(o.AfEeData) {
		return true
	}

	return false
}

// SetAfEeData gets a reference to the given AfEventExposureData and assigns it to the AfEeData field.
func (o *NefInfo) SetAfEeData(v AfEventExposureData) {
	o.AfEeData = &v
}

// GetGpsiRanges returns the GpsiRanges field value if set, zero value otherwise.
func (o *NefInfo) GetGpsiRanges() []IdentityRange {
	if o == nil || IsNil(o.GpsiRanges) {
		var ret []IdentityRange
		return ret
	}
	return o.GpsiRanges
}

// GetGpsiRangesOk returns a tuple with the GpsiRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetGpsiRangesOk() ([]IdentityRange, bool) {
	if o == nil || IsNil(o.GpsiRanges) {
		return nil, false
	}
	return o.GpsiRanges, true
}

// HasGpsiRanges returns a boolean if a field has been set.
func (o *NefInfo) HasGpsiRanges() bool {
	if o != nil && !IsNil(o.GpsiRanges) {
		return true
	}

	return false
}

// SetGpsiRanges gets a reference to the given []IdentityRange and assigns it to the GpsiRanges field.
func (o *NefInfo) SetGpsiRanges(v []IdentityRange) {
	o.GpsiRanges = v
}

// GetExternalGroupIdentifiersRanges returns the ExternalGroupIdentifiersRanges field value if set, zero value otherwise.
func (o *NefInfo) GetExternalGroupIdentifiersRanges() []IdentityRange {
	if o == nil || IsNil(o.ExternalGroupIdentifiersRanges) {
		var ret []IdentityRange
		return ret
	}
	return o.ExternalGroupIdentifiersRanges
}

// GetExternalGroupIdentifiersRangesOk returns a tuple with the ExternalGroupIdentifiersRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetExternalGroupIdentifiersRangesOk() ([]IdentityRange, bool) {
	if o == nil || IsNil(o.ExternalGroupIdentifiersRanges) {
		return nil, false
	}
	return o.ExternalGroupIdentifiersRanges, true
}

// HasExternalGroupIdentifiersRanges returns a boolean if a field has been set.
func (o *NefInfo) HasExternalGroupIdentifiersRanges() bool {
	if o != nil && !IsNil(o.ExternalGroupIdentifiersRanges) {
		return true
	}

	return false
}

// SetExternalGroupIdentifiersRanges gets a reference to the given []IdentityRange and assigns it to the ExternalGroupIdentifiersRanges field.
func (o *NefInfo) SetExternalGroupIdentifiersRanges(v []IdentityRange) {
	o.ExternalGroupIdentifiersRanges = v
}

// GetServedFqdnList returns the ServedFqdnList field value if set, zero value otherwise.
func (o *NefInfo) GetServedFqdnList() []string {
	if o == nil || IsNil(o.ServedFqdnList) {
		var ret []string
		return ret
	}
	return o.ServedFqdnList
}

// GetServedFqdnListOk returns a tuple with the ServedFqdnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetServedFqdnListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServedFqdnList) {
		return nil, false
	}
	return o.ServedFqdnList, true
}

// HasServedFqdnList returns a boolean if a field has been set.
func (o *NefInfo) HasServedFqdnList() bool {
	if o != nil && !IsNil(o.ServedFqdnList) {
		return true
	}

	return false
}

// SetServedFqdnList gets a reference to the given []string and assigns it to the ServedFqdnList field.
func (o *NefInfo) SetServedFqdnList(v []string) {
	o.ServedFqdnList = v
}

// GetTaiList returns the TaiList field value if set, zero value otherwise.
func (o *NefInfo) GetTaiList() []Tai {
	if o == nil || IsNil(o.TaiList) {
		var ret []Tai
		return ret
	}
	return o.TaiList
}

// GetTaiListOk returns a tuple with the TaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetTaiListOk() ([]Tai, bool) {
	if o == nil || IsNil(o.TaiList) {
		return nil, false
	}
	return o.TaiList, true
}

// HasTaiList returns a boolean if a field has been set.
func (o *NefInfo) HasTaiList() bool {
	if o != nil && !IsNil(o.TaiList) {
		return true
	}

	return false
}

// SetTaiList gets a reference to the given []Tai and assigns it to the TaiList field.
func (o *NefInfo) SetTaiList(v []Tai) {
	o.TaiList = v
}

// GetTaiRangeList returns the TaiRangeList field value if set, zero value otherwise.
func (o *NefInfo) GetTaiRangeList() []TaiRange {
	if o == nil || IsNil(o.TaiRangeList) {
		var ret []TaiRange
		return ret
	}
	return o.TaiRangeList
}

// GetTaiRangeListOk returns a tuple with the TaiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetTaiRangeListOk() ([]TaiRange, bool) {
	if o == nil || IsNil(o.TaiRangeList) {
		return nil, false
	}
	return o.TaiRangeList, true
}

// HasTaiRangeList returns a boolean if a field has been set.
func (o *NefInfo) HasTaiRangeList() bool {
	if o != nil && !IsNil(o.TaiRangeList) {
		return true
	}

	return false
}

// SetTaiRangeList gets a reference to the given []TaiRange and assigns it to the TaiRangeList field.
func (o *NefInfo) SetTaiRangeList(v []TaiRange) {
	o.TaiRangeList = v
}

// GetDnaiList returns the DnaiList field value if set, zero value otherwise.
func (o *NefInfo) GetDnaiList() []string {
	if o == nil || IsNil(o.DnaiList) {
		var ret []string
		return ret
	}
	return o.DnaiList
}

// GetDnaiListOk returns a tuple with the DnaiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetDnaiListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnaiList) {
		return nil, false
	}
	return o.DnaiList, true
}

// HasDnaiList returns a boolean if a field has been set.
func (o *NefInfo) HasDnaiList() bool {
	if o != nil && !IsNil(o.DnaiList) {
		return true
	}

	return false
}

// SetDnaiList gets a reference to the given []string and assigns it to the DnaiList field.
func (o *NefInfo) SetDnaiList(v []string) {
	o.DnaiList = v
}

// GetUnTrustAfInfoList returns the UnTrustAfInfoList field value if set, zero value otherwise.
func (o *NefInfo) GetUnTrustAfInfoList() []UnTrustAfInfo {
	if o == nil || IsNil(o.UnTrustAfInfoList) {
		var ret []UnTrustAfInfo
		return ret
	}
	return o.UnTrustAfInfoList
}

// GetUnTrustAfInfoListOk returns a tuple with the UnTrustAfInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetUnTrustAfInfoListOk() ([]UnTrustAfInfo, bool) {
	if o == nil || IsNil(o.UnTrustAfInfoList) {
		return nil, false
	}
	return o.UnTrustAfInfoList, true
}

// HasUnTrustAfInfoList returns a boolean if a field has been set.
func (o *NefInfo) HasUnTrustAfInfoList() bool {
	if o != nil && !IsNil(o.UnTrustAfInfoList) {
		return true
	}

	return false
}

// SetUnTrustAfInfoList gets a reference to the given []UnTrustAfInfo and assigns it to the UnTrustAfInfoList field.
func (o *NefInfo) SetUnTrustAfInfoList(v []UnTrustAfInfo) {
	o.UnTrustAfInfoList = v
}

// GetUasNfFunctionalityInd returns the UasNfFunctionalityInd field value if set, zero value otherwise.
func (o *NefInfo) GetUasNfFunctionalityInd() bool {
	if o == nil || IsNil(o.UasNfFunctionalityInd) {
		var ret bool
		return ret
	}
	return *o.UasNfFunctionalityInd
}

// GetUasNfFunctionalityIndOk returns a tuple with the UasNfFunctionalityInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetUasNfFunctionalityIndOk() (*bool, bool) {
	if o == nil || IsNil(o.UasNfFunctionalityInd) {
		return nil, false
	}
	return o.UasNfFunctionalityInd, true
}

// HasUasNfFunctionalityInd returns a boolean if a field has been set.
func (o *NefInfo) HasUasNfFunctionalityInd() bool {
	if o != nil && !IsNil(o.UasNfFunctionalityInd) {
		return true
	}

	return false
}

// SetUasNfFunctionalityInd gets a reference to the given bool and assigns it to the UasNfFunctionalityInd field.
func (o *NefInfo) SetUasNfFunctionalityInd(v bool) {
	o.UasNfFunctionalityInd = &v
}

// GetMultiMemAfSessQosInd returns the MultiMemAfSessQosInd field value if set, zero value otherwise.
func (o *NefInfo) GetMultiMemAfSessQosInd() bool {
	if o == nil || IsNil(o.MultiMemAfSessQosInd) {
		var ret bool
		return ret
	}
	return *o.MultiMemAfSessQosInd
}

// GetMultiMemAfSessQosIndOk returns a tuple with the MultiMemAfSessQosInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetMultiMemAfSessQosIndOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiMemAfSessQosInd) {
		return nil, false
	}
	return o.MultiMemAfSessQosInd, true
}

// HasMultiMemAfSessQosInd returns a boolean if a field has been set.
func (o *NefInfo) HasMultiMemAfSessQosInd() bool {
	if o != nil && !IsNil(o.MultiMemAfSessQosInd) {
		return true
	}

	return false
}

// SetMultiMemAfSessQosInd gets a reference to the given bool and assigns it to the MultiMemAfSessQosInd field.
func (o *NefInfo) SetMultiMemAfSessQosInd(v bool) {
	o.MultiMemAfSessQosInd = &v
}

// GetMemberUESelAssistInd returns the MemberUESelAssistInd field value if set, zero value otherwise.
func (o *NefInfo) GetMemberUESelAssistInd() bool {
	if o == nil || IsNil(o.MemberUESelAssistInd) {
		var ret bool
		return ret
	}
	return *o.MemberUESelAssistInd
}

// GetMemberUESelAssistIndOk returns a tuple with the MemberUESelAssistInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NefInfo) GetMemberUESelAssistIndOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberUESelAssistInd) {
		return nil, false
	}
	return o.MemberUESelAssistInd, true
}

// HasMemberUESelAssistInd returns a boolean if a field has been set.
func (o *NefInfo) HasMemberUESelAssistInd() bool {
	if o != nil && !IsNil(o.MemberUESelAssistInd) {
		return true
	}

	return false
}

// SetMemberUESelAssistInd gets a reference to the given bool and assigns it to the MemberUESelAssistInd field.
func (o *NefInfo) SetMemberUESelAssistInd(v bool) {
	o.MemberUESelAssistInd = &v
}

func (o NefInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NefInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NefId) {
		toSerialize["nefId"] = o.NefId
	}
	if !IsNil(o.PfdData) {
		toSerialize["pfdData"] = o.PfdData
	}
	if !IsNil(o.AfEeData) {
		toSerialize["afEeData"] = o.AfEeData
	}
	if !IsNil(o.GpsiRanges) {
		toSerialize["gpsiRanges"] = o.GpsiRanges
	}
	if !IsNil(o.ExternalGroupIdentifiersRanges) {
		toSerialize["externalGroupIdentifiersRanges"] = o.ExternalGroupIdentifiersRanges
	}
	if !IsNil(o.ServedFqdnList) {
		toSerialize["servedFqdnList"] = o.ServedFqdnList
	}
	if !IsNil(o.TaiList) {
		toSerialize["taiList"] = o.TaiList
	}
	if !IsNil(o.TaiRangeList) {
		toSerialize["taiRangeList"] = o.TaiRangeList
	}
	if !IsNil(o.DnaiList) {
		toSerialize["dnaiList"] = o.DnaiList
	}
	if !IsNil(o.UnTrustAfInfoList) {
		toSerialize["unTrustAfInfoList"] = o.UnTrustAfInfoList
	}
	if !IsNil(o.UasNfFunctionalityInd) {
		toSerialize["uasNfFunctionalityInd"] = o.UasNfFunctionalityInd
	}
	if !IsNil(o.MultiMemAfSessQosInd) {
		toSerialize["multiMemAfSessQosInd"] = o.MultiMemAfSessQosInd
	}
	if !IsNil(o.MemberUESelAssistInd) {
		toSerialize["memberUESelAssistInd"] = o.MemberUESelAssistInd
	}
	return toSerialize, nil
}

type NullableNefInfo struct {
	value *NefInfo
	isSet bool
}

func (v NullableNefInfo) Get() *NefInfo {
	return v.value
}

func (v *NullableNefInfo) Set(val *NefInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNefInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNefInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNefInfo(val *NefInfo) *NullableNefInfo {
	return &NullableNefInfo{value: val, isSet: true}
}

func (v NullableNefInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNefInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
