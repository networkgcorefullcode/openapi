/*
NRF NFManagement Service

NRF NFManagement Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.4.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ConditionItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionItem{}

// ConditionItem A ConditionItem consists of a number of attributes representing individual conditions (e.g. a SUPI range, or a TAI list). If several attributes/conditions are present, the evaluation of the ConditionItem is <true> if all attributes/conditions are evaluated as <true> (i.e., it follows the AND logical relationship).
type ConditionItem struct {
	ConsumerNfTypes  []NFType        `json:"consumerNfTypes,omitempty"`
	ServiceFeature   *int32          `json:"serviceFeature,omitempty"`
	VsServiceFeature *int32          `json:"vsServiceFeature,omitempty"`
	SupiRangeList    []SupiRange     `json:"supiRangeList,omitempty"`
	GpsiRangeList    []IdentityRange `json:"gpsiRangeList,omitempty"`
	ImpuRangeList    []IdentityRange `json:"impuRangeList,omitempty"`
	ImpiRangeList    []IdentityRange `json:"impiRangeList,omitempty"`
	PeiList          []string        `json:"peiList,omitempty"`
	TaiRangeList     []TaiRange      `json:"taiRangeList,omitempty"`
	DnnList          []string        `json:"dnnList,omitempty"`
}

// NewConditionItem instantiates a new ConditionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionItem() *ConditionItem {
	this := ConditionItem{}
	return &this
}

// NewConditionItemWithDefaults instantiates a new ConditionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionItemWithDefaults() *ConditionItem {
	this := ConditionItem{}
	return &this
}

// GetConsumerNfTypes returns the ConsumerNfTypes field value if set, zero value otherwise.
func (o *ConditionItem) GetConsumerNfTypes() []NFType {
	if o == nil || IsNil(o.ConsumerNfTypes) {
		var ret []NFType
		return ret
	}
	return o.ConsumerNfTypes
}

// GetConsumerNfTypesOk returns a tuple with the ConsumerNfTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetConsumerNfTypesOk() ([]NFType, bool) {
	if o == nil || IsNil(o.ConsumerNfTypes) {
		return nil, false
	}
	return o.ConsumerNfTypes, true
}

// HasConsumerNfTypes returns a boolean if a field has been set.
func (o *ConditionItem) HasConsumerNfTypes() bool {
	if o != nil && !IsNil(o.ConsumerNfTypes) {
		return true
	}

	return false
}

// SetConsumerNfTypes gets a reference to the given []NFType and assigns it to the ConsumerNfTypes field.
func (o *ConditionItem) SetConsumerNfTypes(v []NFType) {
	o.ConsumerNfTypes = v
}

// GetServiceFeature returns the ServiceFeature field value if set, zero value otherwise.
func (o *ConditionItem) GetServiceFeature() int32 {
	if o == nil || IsNil(o.ServiceFeature) {
		var ret int32
		return ret
	}
	return *o.ServiceFeature
}

// GetServiceFeatureOk returns a tuple with the ServiceFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetServiceFeatureOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceFeature) {
		return nil, false
	}
	return o.ServiceFeature, true
}

// HasServiceFeature returns a boolean if a field has been set.
func (o *ConditionItem) HasServiceFeature() bool {
	if o != nil && !IsNil(o.ServiceFeature) {
		return true
	}

	return false
}

// SetServiceFeature gets a reference to the given int32 and assigns it to the ServiceFeature field.
func (o *ConditionItem) SetServiceFeature(v int32) {
	o.ServiceFeature = &v
}

// GetVsServiceFeature returns the VsServiceFeature field value if set, zero value otherwise.
func (o *ConditionItem) GetVsServiceFeature() int32 {
	if o == nil || IsNil(o.VsServiceFeature) {
		var ret int32
		return ret
	}
	return *o.VsServiceFeature
}

// GetVsServiceFeatureOk returns a tuple with the VsServiceFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetVsServiceFeatureOk() (*int32, bool) {
	if o == nil || IsNil(o.VsServiceFeature) {
		return nil, false
	}
	return o.VsServiceFeature, true
}

// HasVsServiceFeature returns a boolean if a field has been set.
func (o *ConditionItem) HasVsServiceFeature() bool {
	if o != nil && !IsNil(o.VsServiceFeature) {
		return true
	}

	return false
}

// SetVsServiceFeature gets a reference to the given int32 and assigns it to the VsServiceFeature field.
func (o *ConditionItem) SetVsServiceFeature(v int32) {
	o.VsServiceFeature = &v
}

// GetSupiRangeList returns the SupiRangeList field value if set, zero value otherwise.
func (o *ConditionItem) GetSupiRangeList() []SupiRange {
	if o == nil || IsNil(o.SupiRangeList) {
		var ret []SupiRange
		return ret
	}
	return o.SupiRangeList
}

// GetSupiRangeListOk returns a tuple with the SupiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetSupiRangeListOk() ([]SupiRange, bool) {
	if o == nil || IsNil(o.SupiRangeList) {
		return nil, false
	}
	return o.SupiRangeList, true
}

// HasSupiRangeList returns a boolean if a field has been set.
func (o *ConditionItem) HasSupiRangeList() bool {
	if o != nil && !IsNil(o.SupiRangeList) {
		return true
	}

	return false
}

// SetSupiRangeList gets a reference to the given []SupiRange and assigns it to the SupiRangeList field.
func (o *ConditionItem) SetSupiRangeList(v []SupiRange) {
	o.SupiRangeList = v
}

// GetGpsiRangeList returns the GpsiRangeList field value if set, zero value otherwise.
func (o *ConditionItem) GetGpsiRangeList() []IdentityRange {
	if o == nil || IsNil(o.GpsiRangeList) {
		var ret []IdentityRange
		return ret
	}
	return o.GpsiRangeList
}

// GetGpsiRangeListOk returns a tuple with the GpsiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetGpsiRangeListOk() ([]IdentityRange, bool) {
	if o == nil || IsNil(o.GpsiRangeList) {
		return nil, false
	}
	return o.GpsiRangeList, true
}

// HasGpsiRangeList returns a boolean if a field has been set.
func (o *ConditionItem) HasGpsiRangeList() bool {
	if o != nil && !IsNil(o.GpsiRangeList) {
		return true
	}

	return false
}

// SetGpsiRangeList gets a reference to the given []IdentityRange and assigns it to the GpsiRangeList field.
func (o *ConditionItem) SetGpsiRangeList(v []IdentityRange) {
	o.GpsiRangeList = v
}

// GetImpuRangeList returns the ImpuRangeList field value if set, zero value otherwise.
func (o *ConditionItem) GetImpuRangeList() []IdentityRange {
	if o == nil || IsNil(o.ImpuRangeList) {
		var ret []IdentityRange
		return ret
	}
	return o.ImpuRangeList
}

// GetImpuRangeListOk returns a tuple with the ImpuRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetImpuRangeListOk() ([]IdentityRange, bool) {
	if o == nil || IsNil(o.ImpuRangeList) {
		return nil, false
	}
	return o.ImpuRangeList, true
}

// HasImpuRangeList returns a boolean if a field has been set.
func (o *ConditionItem) HasImpuRangeList() bool {
	if o != nil && !IsNil(o.ImpuRangeList) {
		return true
	}

	return false
}

// SetImpuRangeList gets a reference to the given []IdentityRange and assigns it to the ImpuRangeList field.
func (o *ConditionItem) SetImpuRangeList(v []IdentityRange) {
	o.ImpuRangeList = v
}

// GetImpiRangeList returns the ImpiRangeList field value if set, zero value otherwise.
func (o *ConditionItem) GetImpiRangeList() []IdentityRange {
	if o == nil || IsNil(o.ImpiRangeList) {
		var ret []IdentityRange
		return ret
	}
	return o.ImpiRangeList
}

// GetImpiRangeListOk returns a tuple with the ImpiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetImpiRangeListOk() ([]IdentityRange, bool) {
	if o == nil || IsNil(o.ImpiRangeList) {
		return nil, false
	}
	return o.ImpiRangeList, true
}

// HasImpiRangeList returns a boolean if a field has been set.
func (o *ConditionItem) HasImpiRangeList() bool {
	if o != nil && !IsNil(o.ImpiRangeList) {
		return true
	}

	return false
}

// SetImpiRangeList gets a reference to the given []IdentityRange and assigns it to the ImpiRangeList field.
func (o *ConditionItem) SetImpiRangeList(v []IdentityRange) {
	o.ImpiRangeList = v
}

// GetPeiList returns the PeiList field value if set, zero value otherwise.
func (o *ConditionItem) GetPeiList() []string {
	if o == nil || IsNil(o.PeiList) {
		var ret []string
		return ret
	}
	return o.PeiList
}

// GetPeiListOk returns a tuple with the PeiList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetPeiListOk() ([]string, bool) {
	if o == nil || IsNil(o.PeiList) {
		return nil, false
	}
	return o.PeiList, true
}

// HasPeiList returns a boolean if a field has been set.
func (o *ConditionItem) HasPeiList() bool {
	if o != nil && !IsNil(o.PeiList) {
		return true
	}

	return false
}

// SetPeiList gets a reference to the given []string and assigns it to the PeiList field.
func (o *ConditionItem) SetPeiList(v []string) {
	o.PeiList = v
}

// GetTaiRangeList returns the TaiRangeList field value if set, zero value otherwise.
func (o *ConditionItem) GetTaiRangeList() []TaiRange {
	if o == nil || IsNil(o.TaiRangeList) {
		var ret []TaiRange
		return ret
	}
	return o.TaiRangeList
}

// GetTaiRangeListOk returns a tuple with the TaiRangeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetTaiRangeListOk() ([]TaiRange, bool) {
	if o == nil || IsNil(o.TaiRangeList) {
		return nil, false
	}
	return o.TaiRangeList, true
}

// HasTaiRangeList returns a boolean if a field has been set.
func (o *ConditionItem) HasTaiRangeList() bool {
	if o != nil && !IsNil(o.TaiRangeList) {
		return true
	}

	return false
}

// SetTaiRangeList gets a reference to the given []TaiRange and assigns it to the TaiRangeList field.
func (o *ConditionItem) SetTaiRangeList(v []TaiRange) {
	o.TaiRangeList = v
}

// GetDnnList returns the DnnList field value if set, zero value otherwise.
func (o *ConditionItem) GetDnnList() []string {
	if o == nil || IsNil(o.DnnList) {
		var ret []string
		return ret
	}
	return o.DnnList
}

// GetDnnListOk returns a tuple with the DnnList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionItem) GetDnnListOk() ([]string, bool) {
	if o == nil || IsNil(o.DnnList) {
		return nil, false
	}
	return o.DnnList, true
}

// HasDnnList returns a boolean if a field has been set.
func (o *ConditionItem) HasDnnList() bool {
	if o != nil && !IsNil(o.DnnList) {
		return true
	}

	return false
}

// SetDnnList gets a reference to the given []string and assigns it to the DnnList field.
func (o *ConditionItem) SetDnnList(v []string) {
	o.DnnList = v
}

func (o ConditionItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerNfTypes) {
		toSerialize["consumerNfTypes"] = o.ConsumerNfTypes
	}
	if !IsNil(o.ServiceFeature) {
		toSerialize["serviceFeature"] = o.ServiceFeature
	}
	if !IsNil(o.VsServiceFeature) {
		toSerialize["vsServiceFeature"] = o.VsServiceFeature
	}
	if !IsNil(o.SupiRangeList) {
		toSerialize["supiRangeList"] = o.SupiRangeList
	}
	if !IsNil(o.GpsiRangeList) {
		toSerialize["gpsiRangeList"] = o.GpsiRangeList
	}
	if !IsNil(o.ImpuRangeList) {
		toSerialize["impuRangeList"] = o.ImpuRangeList
	}
	if !IsNil(o.ImpiRangeList) {
		toSerialize["impiRangeList"] = o.ImpiRangeList
	}
	if !IsNil(o.PeiList) {
		toSerialize["peiList"] = o.PeiList
	}
	if !IsNil(o.TaiRangeList) {
		toSerialize["taiRangeList"] = o.TaiRangeList
	}
	if !IsNil(o.DnnList) {
		toSerialize["dnnList"] = o.DnnList
	}
	return toSerialize, nil
}

type NullableConditionItem struct {
	value *ConditionItem
	isSet bool
}

func (v NullableConditionItem) Get() *ConditionItem {
	return v.value
}

func (v *NullableConditionItem) Set(val *ConditionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionItem(val *ConditionItem) *NullableConditionItem {
	return &NullableConditionItem{value: val, isSet: true}
}

func (v NullableConditionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
