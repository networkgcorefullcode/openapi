// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// AccessAndMobility struct for AccessAndMobility
type AccessAndMobility struct {
	PlmnId PlmnId   `json:"plmnId"`
	Snssai Snssai   `json:"snssai"`
	Tacs   []string `json:"tacs,omitempty"`
}

type _AccessAndMobility AccessAndMobility

// NewAccessAndMobility instantiates a new AccessAndMobility object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessAndMobility(plmnId PlmnId, snssai Snssai) *AccessAndMobility {
	this := AccessAndMobility{}
	this.PlmnId = plmnId
	this.Snssai = snssai
	return &this
}

// NewAccessAndMobilityWithDefaults instantiates a new AccessAndMobility object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessAndMobilityWithDefaults() *AccessAndMobility {
	this := AccessAndMobility{}
	return &this
}

// GetPlmnId returns the PlmnId field value
func (o *AccessAndMobility) GetPlmnId() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value
// and a boolean to check if the value has been set.
func (o *AccessAndMobility) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlmnId, true
}

// SetPlmnId sets field value
func (o *AccessAndMobility) SetPlmnId(v PlmnId) {
	o.PlmnId = v
}

// GetSnssai returns the Snssai field value
func (o *AccessAndMobility) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *AccessAndMobility) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *AccessAndMobility) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetTacs returns the Tacs field value if set, zero value otherwise.
func (o *AccessAndMobility) GetTacs() []string {
	if o == nil || IsNil(o.Tacs) {
		var ret []string
		return ret
	}
	return o.Tacs
}

// GetTacsOk returns a tuple with the Tacs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessAndMobility) GetTacsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tacs) {
		return nil, false
	}
	return o.Tacs, true
}

// HasTacs returns a boolean if a field has been set.
func (o *AccessAndMobility) HasTacs() bool {
	if o != nil && !IsNil(o.Tacs) {
		return true
	}

	return false
}

// SetTacs gets a reference to the given []string and assigns it to the Tacs field.
func (o *AccessAndMobility) SetTacs(v []string) {
	o.Tacs = v
}

func (o AccessAndMobility) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessAndMobility) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plmnId"] = o.PlmnId
	toSerialize["snssai"] = o.Snssai
	if !IsNil(o.Tacs) {
		toSerialize["tacs"] = o.Tacs
	}
	return toSerialize, nil
}

func (o *AccessAndMobility) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plmnId",
		"snssai",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessAndMobility := _AccessAndMobility{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessAndMobility)

	if err != nil {
		return err
	}

	*o = AccessAndMobility(varAccessAndMobility)

	return err
}

type NullableAccessAndMobility struct {
	value *AccessAndMobility
	isSet bool
}

func (v NullableAccessAndMobility) Get() *AccessAndMobility {
	return v.value
}

func (v *NullableAccessAndMobility) Set(val *AccessAndMobility) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessAndMobility) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessAndMobility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessAndMobility(val *AccessAndMobility) *NullableAccessAndMobility {
	return &NullableAccessAndMobility{value: val, isSet: true}
}

func (v NullableAccessAndMobility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessAndMobility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
