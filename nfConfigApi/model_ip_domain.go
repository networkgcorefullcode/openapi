// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// IpDomain struct for IpDomain
type IpDomain struct {
	DnnName  string `json:"dnnName"`
	DnsIpv4  string `json:"dnsIpv4"`
	UeSubnet string `json:"ueSubnet"`
	Mtu      int32  `json:"mtu"`
}

type _IpDomain IpDomain

// NewIpDomain instantiates a new IpDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpDomain(dnnName string, dnsIpv4 string, ueSubnet string, mtu int32) *IpDomain {
	this := IpDomain{}
	this.DnnName = dnnName
	this.DnsIpv4 = dnsIpv4
	this.UeSubnet = ueSubnet
	this.Mtu = mtu
	return &this
}

// NewIpDomainWithDefaults instantiates a new IpDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpDomainWithDefaults() *IpDomain {
	this := IpDomain{}
	return &this
}

// GetDnnName returns the DnnName field value
func (o *IpDomain) GetDnnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnnName
}

// GetDnnNameOk returns a tuple with the DnnName field value
// and a boolean to check if the value has been set.
func (o *IpDomain) GetDnnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnnName, true
}

// SetDnnName sets field value
func (o *IpDomain) SetDnnName(v string) {
	o.DnnName = v
}

// GetDnsIpv4 returns the DnsIpv4 field value
func (o *IpDomain) GetDnsIpv4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnsIpv4
}

// GetDnsIpv4Ok returns a tuple with the DnsIpv4 field value
// and a boolean to check if the value has been set.
func (o *IpDomain) GetDnsIpv4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsIpv4, true
}

// SetDnsIpv4 sets field value
func (o *IpDomain) SetDnsIpv4(v string) {
	o.DnsIpv4 = v
}

// GetUeSubnet returns the UeSubnet field value
func (o *IpDomain) GetUeSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UeSubnet
}

// GetUeSubnetOk returns a tuple with the UeSubnet field value
// and a boolean to check if the value has been set.
func (o *IpDomain) GetUeSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UeSubnet, true
}

// SetUeSubnet sets field value
func (o *IpDomain) SetUeSubnet(v string) {
	o.UeSubnet = v
}

// GetMtu returns the Mtu field value
func (o *IpDomain) GetMtu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value
// and a boolean to check if the value has been set.
func (o *IpDomain) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mtu, true
}

// SetMtu sets field value
func (o *IpDomain) SetMtu(v int32) {
	o.Mtu = v
}

func (o IpDomain) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnnName"] = o.DnnName
	toSerialize["dnsIpv4"] = o.DnsIpv4
	toSerialize["ueSubnet"] = o.UeSubnet
	toSerialize["mtu"] = o.Mtu
	return toSerialize, nil
}

func (o *IpDomain) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dnnName",
		"dnsIpv4",
		"ueSubnet",
		"mtu",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpDomain := _IpDomain{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIpDomain)

	if err != nil {
		return err
	}

	*o = IpDomain(varIpDomain)

	return err
}

type NullableIpDomain struct {
	value *IpDomain
	isSet bool
}

func (v NullableIpDomain) Get() *IpDomain {
	return v.value
}

func (v *NullableIpDomain) Set(val *IpDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableIpDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableIpDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpDomain(val *IpDomain) *NullableIpDomain {
	return &NullableIpDomain{value: val, isSet: true}
}

func (v NullableIpDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
