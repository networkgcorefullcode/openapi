// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// DnnQos struct for DnnQos
type DnnQos struct {
	DnnName          string `json:"dnnName"`
	MbrUplink        string `json:"mbrUplink"`
	MbrDownlink      string `json:"mbrDownlink"`
	FiveQi           *int32 `json:"fiveQi,omitempty"`
	ArpPriorityLevel *int32 `json:"arpPriorityLevel,omitempty"`
}

type _DnnQos DnnQos

// NewDnnQos instantiates a new DnnQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnnQos(dnnName string, mbrUplink string, mbrDownlink string) *DnnQos {
	this := DnnQos{}
	this.DnnName = dnnName
	this.MbrUplink = mbrUplink
	this.MbrDownlink = mbrDownlink
	return &this
}

// NewDnnQosWithDefaults instantiates a new DnnQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnnQosWithDefaults() *DnnQos {
	this := DnnQos{}
	return &this
}

// GetDnnName returns the DnnName field value
func (o *DnnQos) GetDnnName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DnnName
}

// GetDnnNameOk returns a tuple with the DnnName field value
// and a boolean to check if the value has been set.
func (o *DnnQos) GetDnnNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnnName, true
}

// SetDnnName sets field value
func (o *DnnQos) SetDnnName(v string) {
	o.DnnName = v
}

// GetMbrUplink returns the MbrUplink field value
func (o *DnnQos) GetMbrUplink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MbrUplink
}

// GetMbrUplinkOk returns a tuple with the MbrUplink field value
// and a boolean to check if the value has been set.
func (o *DnnQos) GetMbrUplinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MbrUplink, true
}

// SetMbrUplink sets field value
func (o *DnnQos) SetMbrUplink(v string) {
	o.MbrUplink = v
}

// GetMbrDownlink returns the MbrDownlink field value
func (o *DnnQos) GetMbrDownlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MbrDownlink
}

// GetMbrDownlinkOk returns a tuple with the MbrDownlink field value
// and a boolean to check if the value has been set.
func (o *DnnQos) GetMbrDownlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MbrDownlink, true
}

// SetMbrDownlink sets field value
func (o *DnnQos) SetMbrDownlink(v string) {
	o.MbrDownlink = v
}

// GetFiveQi returns the FiveQi field value if set, zero value otherwise.
func (o *DnnQos) GetFiveQi() int32 {
	if o == nil || IsNil(o.FiveQi) {
		var ret int32
		return ret
	}
	return *o.FiveQi
}

// GetFiveQiOk returns a tuple with the FiveQi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnnQos) GetFiveQiOk() (*int32, bool) {
	if o == nil || IsNil(o.FiveQi) {
		return nil, false
	}
	return o.FiveQi, true
}

// HasFiveQi returns a boolean if a field has been set.
func (o *DnnQos) HasFiveQi() bool {
	if o != nil && !IsNil(o.FiveQi) {
		return true
	}

	return false
}

// SetFiveQi gets a reference to the given int32 and assigns it to the FiveQi field.
func (o *DnnQos) SetFiveQi(v int32) {
	o.FiveQi = &v
}

// GetArpPriorityLevel returns the ArpPriorityLevel field value if set, zero value otherwise.
func (o *DnnQos) GetArpPriorityLevel() int32 {
	if o == nil || IsNil(o.ArpPriorityLevel) {
		var ret int32
		return ret
	}
	return *o.ArpPriorityLevel
}

// GetArpPriorityLevelOk returns a tuple with the ArpPriorityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnnQos) GetArpPriorityLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.ArpPriorityLevel) {
		return nil, false
	}
	return o.ArpPriorityLevel, true
}

// HasArpPriorityLevel returns a boolean if a field has been set.
func (o *DnnQos) HasArpPriorityLevel() bool {
	if o != nil && !IsNil(o.ArpPriorityLevel) {
		return true
	}

	return false
}

// SetArpPriorityLevel gets a reference to the given int32 and assigns it to the ArpPriorityLevel field.
func (o *DnnQos) SetArpPriorityLevel(v int32) {
	o.ArpPriorityLevel = &v
}

func (o DnnQos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnnQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnnName"] = o.DnnName
	toSerialize["mbrUplink"] = o.MbrUplink
	toSerialize["mbrDownlink"] = o.MbrDownlink
	if !IsNil(o.FiveQi) {
		toSerialize["fiveQi"] = o.FiveQi
	}
	if !IsNil(o.ArpPriorityLevel) {
		toSerialize["arpPriorityLevel"] = o.ArpPriorityLevel
	}
	return toSerialize, nil
}

func (o *DnnQos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dnnName",
		"mbrUplink",
		"mbrDownlink",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnnQos := _DnnQos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnnQos)

	if err != nil {
		return err
	}

	*o = DnnQos(varDnnQos)

	return err
}

type NullableDnnQos struct {
	value *DnnQos
	isSet bool
}

func (v NullableDnnQos) Get() *DnnQos {
	return v.value
}

func (v *NullableDnnQos) Set(val *DnnQos) {
	v.value = val
	v.isSet = true
}

func (v NullableDnnQos) IsSet() bool {
	return v.isSet
}

func (v *NullableDnnQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnnQos(val *DnnQos) *NullableDnnQos {
	return &NullableDnnQos{value: val, isSet: true}
}

func (v NullableDnnQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnnQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
