// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// Arp struct for Arp
type Arp struct {
	PriorityLevel int32       `json:"priorityLevel"`
	PreemptCap    PreemptCap  `json:"preemptCap"`
	PreemptVuln   PreemptVuln `json:"preemptVuln"`
}

type _Arp Arp

// NewArp instantiates a new Arp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArp(priorityLevel int32, preemptCap PreemptCap, preemptVuln PreemptVuln) *Arp {
	this := Arp{}
	this.PriorityLevel = priorityLevel
	this.PreemptCap = preemptCap
	this.PreemptVuln = preemptVuln
	return &this
}

// NewArpWithDefaults instantiates a new Arp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArpWithDefaults() *Arp {
	this := Arp{}
	return &this
}

// GetPriorityLevel returns the PriorityLevel field value
func (o *Arp) GetPriorityLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PriorityLevel
}

// GetPriorityLevelOk returns a tuple with the PriorityLevel field value
// and a boolean to check if the value has been set.
func (o *Arp) GetPriorityLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriorityLevel, true
}

// SetPriorityLevel sets field value
func (o *Arp) SetPriorityLevel(v int32) {
	o.PriorityLevel = v
}

// GetPreemptCap returns the PreemptCap field value
func (o *Arp) GetPreemptCap() PreemptCap {
	if o == nil {
		var ret PreemptCap
		return ret
	}

	return o.PreemptCap
}

// GetPreemptCapOk returns a tuple with the PreemptCap field value
// and a boolean to check if the value has been set.
func (o *Arp) GetPreemptCapOk() (*PreemptCap, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreemptCap, true
}

// SetPreemptCap sets field value
func (o *Arp) SetPreemptCap(v PreemptCap) {
	o.PreemptCap = v
}

// GetPreemptVuln returns the PreemptVuln field value
func (o *Arp) GetPreemptVuln() PreemptVuln {
	if o == nil {
		var ret PreemptVuln
		return ret
	}

	return o.PreemptVuln
}

// GetPreemptVulnOk returns a tuple with the PreemptVuln field value
// and a boolean to check if the value has been set.
func (o *Arp) GetPreemptVulnOk() (*PreemptVuln, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreemptVuln, true
}

// SetPreemptVuln sets field value
func (o *Arp) SetPreemptVuln(v PreemptVuln) {
	o.PreemptVuln = v
}

func (o Arp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Arp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["priorityLevel"] = o.PriorityLevel
	toSerialize["preemptCap"] = o.PreemptCap
	toSerialize["preemptVuln"] = o.PreemptVuln
	return toSerialize, nil
}

func (o *Arp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"priorityLevel",
		"preemptCap",
		"preemptVuln",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArp := _Arp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArp)

	if err != nil {
		return err
	}

	*o = Arp(varArp)

	return err
}

type NullableArp struct {
	value *Arp
	isSet bool
}

func (v NullableArp) Get() *Arp {
	return v.value
}

func (v *NullableArp) Set(val *Arp) {
	v.value = val
	v.isSet = true
}

func (v NullableArp) IsSet() bool {
	return v.isSet
}

func (v *NullableArp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArp(val *Arp) *NullableArp {
	return &NullableArp{value: val, isSet: true}
}

func (v NullableArp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
