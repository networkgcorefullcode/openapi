// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PolicyControl struct for PolicyControl
type PolicyControl struct {
	PlmnId   PlmnId    `json:"plmnId"`
	Snssai   Snssai    `json:"snssai"`
	DnnQos   []DnnQos  `json:"dnnQos,omitempty"`
	PccRules []PccRule `json:"pccRules"`
}

type _PolicyControl PolicyControl

// NewPolicyControl instantiates a new PolicyControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyControl(plmnId PlmnId, snssai Snssai, pccRules []PccRule) *PolicyControl {
	this := PolicyControl{}
	this.PlmnId = plmnId
	this.Snssai = snssai
	this.PccRules = pccRules
	return &this
}

// NewPolicyControlWithDefaults instantiates a new PolicyControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyControlWithDefaults() *PolicyControl {
	this := PolicyControl{}
	return &this
}

// GetPlmnId returns the PlmnId field value
func (o *PolicyControl) GetPlmnId() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value
// and a boolean to check if the value has been set.
func (o *PolicyControl) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlmnId, true
}

// SetPlmnId sets field value
func (o *PolicyControl) SetPlmnId(v PlmnId) {
	o.PlmnId = v
}

// GetSnssai returns the Snssai field value
func (o *PolicyControl) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *PolicyControl) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *PolicyControl) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetDnnQos returns the DnnQos field value if set, zero value otherwise.
func (o *PolicyControl) GetDnnQos() []DnnQos {
	if o == nil || IsNil(o.DnnQos) {
		var ret []DnnQos
		return ret
	}
	return o.DnnQos
}

// GetDnnQosOk returns a tuple with the DnnQos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyControl) GetDnnQosOk() ([]DnnQos, bool) {
	if o == nil || IsNil(o.DnnQos) {
		return nil, false
	}
	return o.DnnQos, true
}

// HasDnnQos returns a boolean if a field has been set.
func (o *PolicyControl) HasDnnQos() bool {
	if o != nil && !IsNil(o.DnnQos) {
		return true
	}

	return false
}

// SetDnnQos gets a reference to the given []DnnQos and assigns it to the DnnQos field.
func (o *PolicyControl) SetDnnQos(v []DnnQos) {
	o.DnnQos = v
}

// GetPccRules returns the PccRules field value
func (o *PolicyControl) GetPccRules() []PccRule {
	if o == nil {
		var ret []PccRule
		return ret
	}

	return o.PccRules
}

// GetPccRulesOk returns a tuple with the PccRules field value
// and a boolean to check if the value has been set.
func (o *PolicyControl) GetPccRulesOk() ([]PccRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.PccRules, true
}

// SetPccRules sets field value
func (o *PolicyControl) SetPccRules(v []PccRule) {
	o.PccRules = v
}

func (o PolicyControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plmnId"] = o.PlmnId
	toSerialize["snssai"] = o.Snssai
	if !IsNil(o.DnnQos) {
		toSerialize["dnnQos"] = o.DnnQos
	}
	toSerialize["pccRules"] = o.PccRules
	return toSerialize, nil
}

func (o *PolicyControl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plmnId",
		"snssai",
		"pccRules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyControl := _PolicyControl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyControl)

	if err != nil {
		return err
	}

	*o = PolicyControl(varPolicyControl)

	return err
}

type NullablePolicyControl struct {
	value *PolicyControl
	isSet bool
}

func (v NullablePolicyControl) Get() *PolicyControl {
	return v.value
}

func (v *NullablePolicyControl) Set(val *PolicyControl) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyControl) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyControl(val *PolicyControl) *NullablePolicyControl {
	return &NullablePolicyControl{value: val, isSet: true}
}

func (v NullablePolicyControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
