// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// SessionManagement struct for SessionManagement
type SessionManagement struct {
	SliceName string     `json:"sliceName"`
	PlmnId    PlmnId     `json:"plmnId"`
	Snssai    Snssai     `json:"snssai"`
	IpDomain  []IpDomain `json:"ipDomain,omitempty"`
	Upf       *Upf       `json:"upf,omitempty"`
	GnbNames  []string   `json:"gnbNames,omitempty"`
}

type _SessionManagement SessionManagement

// NewSessionManagement instantiates a new SessionManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionManagement(sliceName string, plmnId PlmnId, snssai Snssai) *SessionManagement {
	this := SessionManagement{}
	this.SliceName = sliceName
	this.PlmnId = plmnId
	this.Snssai = snssai
	return &this
}

// NewSessionManagementWithDefaults instantiates a new SessionManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionManagementWithDefaults() *SessionManagement {
	this := SessionManagement{}
	return &this
}

// GetSliceName returns the SliceName field value
func (o *SessionManagement) GetSliceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SliceName
}

// GetSliceNameOk returns a tuple with the SliceName field value
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetSliceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SliceName, true
}

// SetSliceName sets field value
func (o *SessionManagement) SetSliceName(v string) {
	o.SliceName = v
}

// GetPlmnId returns the PlmnId field value
func (o *SessionManagement) GetPlmnId() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlmnId, true
}

// SetPlmnId sets field value
func (o *SessionManagement) SetPlmnId(v PlmnId) {
	o.PlmnId = v
}

// GetSnssai returns the Snssai field value
func (o *SessionManagement) GetSnssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.Snssai
}

// GetSnssaiOk returns a tuple with the Snssai field value
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetSnssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snssai, true
}

// SetSnssai sets field value
func (o *SessionManagement) SetSnssai(v Snssai) {
	o.Snssai = v
}

// GetIpDomain returns the IpDomain field value if set, zero value otherwise.
func (o *SessionManagement) GetIpDomain() []IpDomain {
	if o == nil || IsNil(o.IpDomain) {
		var ret []IpDomain
		return ret
	}
	return o.IpDomain
}

// GetIpDomainOk returns a tuple with the IpDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetIpDomainOk() ([]IpDomain, bool) {
	if o == nil || IsNil(o.IpDomain) {
		return nil, false
	}
	return o.IpDomain, true
}

// HasIpDomain returns a boolean if a field has been set.
func (o *SessionManagement) HasIpDomain() bool {
	if o != nil && !IsNil(o.IpDomain) {
		return true
	}

	return false
}

// SetIpDomain gets a reference to the given []IpDomain and assigns it to the IpDomain field.
func (o *SessionManagement) SetIpDomain(v []IpDomain) {
	o.IpDomain = v
}

// GetUpf returns the Upf field value if set, zero value otherwise.
func (o *SessionManagement) GetUpf() Upf {
	if o == nil || IsNil(o.Upf) {
		var ret Upf
		return ret
	}
	return *o.Upf
}

// GetUpfOk returns a tuple with the Upf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetUpfOk() (*Upf, bool) {
	if o == nil || IsNil(o.Upf) {
		return nil, false
	}
	return o.Upf, true
}

// HasUpf returns a boolean if a field has been set.
func (o *SessionManagement) HasUpf() bool {
	if o != nil && !IsNil(o.Upf) {
		return true
	}

	return false
}

// SetUpf gets a reference to the given Upf and assigns it to the Upf field.
func (o *SessionManagement) SetUpf(v Upf) {
	o.Upf = &v
}

// GetGnbNames returns the GnbNames field value if set, zero value otherwise.
func (o *SessionManagement) GetGnbNames() []string {
	if o == nil || IsNil(o.GnbNames) {
		var ret []string
		return ret
	}
	return o.GnbNames
}

// GetGnbNamesOk returns a tuple with the GnbNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionManagement) GetGnbNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.GnbNames) {
		return nil, false
	}
	return o.GnbNames, true
}

// HasGnbNames returns a boolean if a field has been set.
func (o *SessionManagement) HasGnbNames() bool {
	if o != nil && !IsNil(o.GnbNames) {
		return true
	}

	return false
}

// SetGnbNames gets a reference to the given []string and assigns it to the GnbNames field.
func (o *SessionManagement) SetGnbNames(v []string) {
	o.GnbNames = v
}

func (o SessionManagement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionManagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sliceName"] = o.SliceName
	toSerialize["plmnId"] = o.PlmnId
	toSerialize["snssai"] = o.Snssai
	if !IsNil(o.IpDomain) {
		toSerialize["ipDomain"] = o.IpDomain
	}
	if !IsNil(o.Upf) {
		toSerialize["upf"] = o.Upf
	}
	if !IsNil(o.GnbNames) {
		toSerialize["gnbNames"] = o.GnbNames
	}
	return toSerialize, nil
}

func (o *SessionManagement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sliceName",
		"plmnId",
		"snssai",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionManagement := _SessionManagement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionManagement)

	if err != nil {
		return err
	}

	*o = SessionManagement(varSessionManagement)

	return err
}

type NullableSessionManagement struct {
	value *SessionManagement
	isSet bool
}

func (v NullableSessionManagement) Get() *SessionManagement {
	return v.value
}

func (v *NullableSessionManagement) Set(val *SessionManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionManagement(val *SessionManagement) *NullableSessionManagement {
	return &NullableSessionManagement{value: val, isSet: true}
}

func (v NullableSessionManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
