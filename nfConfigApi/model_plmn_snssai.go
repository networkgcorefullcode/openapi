// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PlmnSnssai struct for PlmnSnssai
type PlmnSnssai struct {
	PlmnId     PlmnId   `json:"plmnId"`
	SNssaiList []Snssai `json:"sNssaiList"`
}

type _PlmnSnssai PlmnSnssai

// NewPlmnSnssai instantiates a new PlmnSnssai object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlmnSnssai(plmnId PlmnId, sNssaiList []Snssai) *PlmnSnssai {
	this := PlmnSnssai{}
	this.PlmnId = plmnId
	this.SNssaiList = sNssaiList
	return &this
}

// NewPlmnSnssaiWithDefaults instantiates a new PlmnSnssai object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlmnSnssaiWithDefaults() *PlmnSnssai {
	this := PlmnSnssai{}
	return &this
}

// GetPlmnId returns the PlmnId field value
func (o *PlmnSnssai) GetPlmnId() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.PlmnId
}

// GetPlmnIdOk returns a tuple with the PlmnId field value
// and a boolean to check if the value has been set.
func (o *PlmnSnssai) GetPlmnIdOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlmnId, true
}

// SetPlmnId sets field value
func (o *PlmnSnssai) SetPlmnId(v PlmnId) {
	o.PlmnId = v
}

// GetSNssaiList returns the SNssaiList field value
func (o *PlmnSnssai) GetSNssaiList() []Snssai {
	if o == nil {
		var ret []Snssai
		return ret
	}

	return o.SNssaiList
}

// GetSNssaiListOk returns a tuple with the SNssaiList field value
// and a boolean to check if the value has been set.
func (o *PlmnSnssai) GetSNssaiListOk() ([]Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return o.SNssaiList, true
}

// SetSNssaiList sets field value
func (o *PlmnSnssai) SetSNssaiList(v []Snssai) {
	o.SNssaiList = v
}

func (o PlmnSnssai) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlmnSnssai) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plmnId"] = o.PlmnId
	toSerialize["sNssaiList"] = o.SNssaiList
	return toSerialize, nil
}

func (o *PlmnSnssai) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plmnId",
		"sNssaiList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlmnSnssai := _PlmnSnssai{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlmnSnssai)

	if err != nil {
		return err
	}

	*o = PlmnSnssai(varPlmnSnssai)

	return err
}

type NullablePlmnSnssai struct {
	value *PlmnSnssai
	isSet bool
}

func (v NullablePlmnSnssai) Get() *PlmnSnssai {
	return v.value
}

func (v *NullablePlmnSnssai) Set(val *PlmnSnssai) {
	v.value = val
	v.isSet = true
}

func (v NullablePlmnSnssai) IsSet() bool {
	return v.isSet
}

func (v *NullablePlmnSnssai) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlmnSnssai(val *PlmnSnssai) *NullablePlmnSnssai {
	return &NullablePlmnSnssai{value: val, isSet: true}
}

func (v NullablePlmnSnssai) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlmnSnssai) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
