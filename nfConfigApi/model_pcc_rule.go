// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PccRule struct for PccRule
type PccRule struct {
	RuleId     string    `json:"ruleId"`
	Flows      []PccFlow `json:"flows"`
	Qos        PccQos    `json:"qos"`
	Precedence int32     `json:"precedence"`
}

type _PccRule PccRule

// NewPccRule instantiates a new PccRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPccRule(ruleId string, flows []PccFlow, qos PccQos, precedence int32) *PccRule {
	this := PccRule{}
	this.RuleId = ruleId
	this.Flows = flows
	this.Qos = qos
	this.Precedence = precedence
	return &this
}

// NewPccRuleWithDefaults instantiates a new PccRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPccRuleWithDefaults() *PccRule {
	this := PccRule{}
	return &this
}

// GetRuleId returns the RuleId field value
func (o *PccRule) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *PccRule) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *PccRule) SetRuleId(v string) {
	o.RuleId = v
}

// GetFlows returns the Flows field value
func (o *PccRule) GetFlows() []PccFlow {
	if o == nil {
		var ret []PccFlow
		return ret
	}

	return o.Flows
}

// GetFlowsOk returns a tuple with the Flows field value
// and a boolean to check if the value has been set.
func (o *PccRule) GetFlowsOk() ([]PccFlow, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flows, true
}

// SetFlows sets field value
func (o *PccRule) SetFlows(v []PccFlow) {
	o.Flows = v
}

// GetQos returns the Qos field value
func (o *PccRule) GetQos() PccQos {
	if o == nil {
		var ret PccQos
		return ret
	}

	return o.Qos
}

// GetQosOk returns a tuple with the Qos field value
// and a boolean to check if the value has been set.
func (o *PccRule) GetQosOk() (*PccQos, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qos, true
}

// SetQos sets field value
func (o *PccRule) SetQos(v PccQos) {
	o.Qos = v
}

// GetPrecedence returns the Precedence field value
func (o *PccRule) GetPrecedence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value
// and a boolean to check if the value has been set.
func (o *PccRule) GetPrecedenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Precedence, true
}

// SetPrecedence sets field value
func (o *PccRule) SetPrecedence(v int32) {
	o.Precedence = v
}

func (o PccRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PccRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ruleId"] = o.RuleId
	toSerialize["flows"] = o.Flows
	toSerialize["qos"] = o.Qos
	toSerialize["precedence"] = o.Precedence
	return toSerialize, nil
}

func (o *PccRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleId",
		"flows",
		"qos",
		"precedence",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPccRule := _PccRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPccRule)

	if err != nil {
		return err
	}

	*o = PccRule(varPccRule)

	return err
}

type NullablePccRule struct {
	value *PccRule
	isSet bool
}

func (v NullablePccRule) Get() *PccRule {
	return v.value
}

func (v *NullablePccRule) Set(val *PccRule) {
	v.value = val
	v.isSet = true
}

func (v NullablePccRule) IsSet() bool {
	return v.isSet
}

func (v *NullablePccRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePccRule(val *PccRule) *NullablePccRule {
	return &NullablePccRule{value: val, isSet: true}
}

func (v NullablePccRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePccRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
