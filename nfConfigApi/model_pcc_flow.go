// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PccFlow struct for PccFlow
type PccFlow struct {
	Description string    `json:"description"`
	Direction   Direction `json:"direction"`
	Status      *Status   `json:"status,omitempty"`
}

type _PccFlow PccFlow

// NewPccFlow instantiates a new PccFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPccFlow(description string, direction Direction) *PccFlow {
	this := PccFlow{}
	this.Description = description
	this.Direction = direction
	return &this
}

// NewPccFlowWithDefaults instantiates a new PccFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPccFlowWithDefaults() *PccFlow {
	this := PccFlow{}
	return &this
}

// GetDescription returns the Description field value
func (o *PccFlow) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PccFlow) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PccFlow) SetDescription(v string) {
	o.Description = v
}

// GetDirection returns the Direction field value
func (o *PccFlow) GetDirection() Direction {
	if o == nil {
		var ret Direction
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *PccFlow) GetDirectionOk() (*Direction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *PccFlow) SetDirection(v Direction) {
	o.Direction = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PccFlow) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PccFlow) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PccFlow) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *PccFlow) SetStatus(v Status) {
	o.Status = &v
}

func (o PccFlow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PccFlow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["direction"] = o.Direction
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *PccFlow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"direction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPccFlow := _PccFlow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPccFlow)

	if err != nil {
		return err
	}

	*o = PccFlow(varPccFlow)

	return err
}

type NullablePccFlow struct {
	value *PccFlow
	isSet bool
}

func (v NullablePccFlow) Get() *PccFlow {
	return v.value
}

func (v *NullablePccFlow) Set(val *PccFlow) {
	v.value = val
	v.isSet = true
}

func (v NullablePccFlow) IsSet() bool {
	return v.isSet
}

func (v *NullablePccFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePccFlow(val *PccFlow) *NullablePccFlow {
	return &NullablePccFlow{value: val, isSet: true}
}

func (v NullablePccFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePccFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
