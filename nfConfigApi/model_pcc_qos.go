// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// PccQos struct for PccQos
type PccQos struct {
	FiveQi  int32  `json:"fiveQi"`
	MaxBrUl string `json:"maxBrUl"`
	MaxBrDl string `json:"maxBrDl"`
	Arp     Arp    `json:"arp"`
}

type _PccQos PccQos

// NewPccQos instantiates a new PccQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPccQos(fiveQi int32, maxBrUl string, maxBrDl string, arp Arp) *PccQos {
	this := PccQos{}
	this.FiveQi = fiveQi
	this.MaxBrUl = maxBrUl
	this.MaxBrDl = maxBrDl
	this.Arp = arp
	return &this
}

// NewPccQosWithDefaults instantiates a new PccQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPccQosWithDefaults() *PccQos {
	this := PccQos{}
	return &this
}

// GetFiveQi returns the FiveQi field value
func (o *PccQos) GetFiveQi() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FiveQi
}

// GetFiveQiOk returns a tuple with the FiveQi field value
// and a boolean to check if the value has been set.
func (o *PccQos) GetFiveQiOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiveQi, true
}

// SetFiveQi sets field value
func (o *PccQos) SetFiveQi(v int32) {
	o.FiveQi = v
}

// GetMaxBrUl returns the MaxBrUl field value
func (o *PccQos) GetMaxBrUl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxBrUl
}

// GetMaxBrUlOk returns a tuple with the MaxBrUl field value
// and a boolean to check if the value has been set.
func (o *PccQos) GetMaxBrUlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBrUl, true
}

// SetMaxBrUl sets field value
func (o *PccQos) SetMaxBrUl(v string) {
	o.MaxBrUl = v
}

// GetMaxBrDl returns the MaxBrDl field value
func (o *PccQos) GetMaxBrDl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxBrDl
}

// GetMaxBrDlOk returns a tuple with the MaxBrDl field value
// and a boolean to check if the value has been set.
func (o *PccQos) GetMaxBrDlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBrDl, true
}

// SetMaxBrDl sets field value
func (o *PccQos) SetMaxBrDl(v string) {
	o.MaxBrDl = v
}

// GetArp returns the Arp field value
func (o *PccQos) GetArp() Arp {
	if o == nil {
		var ret Arp
		return ret
	}

	return o.Arp
}

// GetArpOk returns a tuple with the Arp field value
// and a boolean to check if the value has been set.
func (o *PccQos) GetArpOk() (*Arp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arp, true
}

// SetArp sets field value
func (o *PccQos) SetArp(v Arp) {
	o.Arp = v
}

func (o PccQos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PccQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fiveQi"] = o.FiveQi
	toSerialize["maxBrUl"] = o.MaxBrUl
	toSerialize["maxBrDl"] = o.MaxBrDl
	toSerialize["arp"] = o.Arp
	return toSerialize, nil
}

func (o *PccQos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fiveQi",
		"maxBrUl",
		"maxBrDl",
		"arp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPccQos := _PccQos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPccQos)

	if err != nil {
		return err
	}

	*o = PccQos(varPccQos)

	return err
}

type NullablePccQos struct {
	value *PccQos
	isSet bool
}

func (v NullablePccQos) Get() *PccQos {
	return v.value
}

func (v *NullablePccQos) Set(val *PccQos) {
	v.value = val
	v.isSet = true
}

func (v NullablePccQos) IsSet() bool {
	return v.isSet
}

func (v *NullablePccQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePccQos(val *PccQos) *NullablePccQos {
	return &NullablePccQos{value: val, isSet: true}
}

func (v NullablePccQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePccQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
